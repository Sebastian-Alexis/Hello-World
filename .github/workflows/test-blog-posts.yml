name: Blog Post Testing Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/pages/blog/**'
      - 'src/lib/db/**'
      - 'tests/**'
      - 'package.json'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/pages/blog/**'
      - 'src/lib/db/**'
      - 'tests/**'
      - 'package.json'
      - 'vitest.config.ts'
      - 'playwright.config.ts'

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  # Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        test-type: ['unit', 'integration']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}

      - name: Generate coverage report
        if: matrix.test-type == 'unit'
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: blog-post-unit-tests

      - name: Upload unit test results
        if: always() && matrix.test-type == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests on ${{ matrix.browser }}
        run: npx playwright test --browser=${{ matrix.browser }} tests/e2e/blog-posts.spec.ts
        env:
          CI: true

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

      - name: Upload failure screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots-${{ matrix.browser }}
          path: test-results/

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: npm run lhci:autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security test
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Database Testing
  database-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      turso:
        image: libsql/sqld:latest
        ports:
          - 8080:8080
        options: >-
          --health-cmd="curl -f http://localhost:8080/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test database setup
        run: npm run db:setup
        env:
          DATABASE_URL: "http://127.0.0.1:8080"

      - name: Test database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: "http://127.0.0.1:8080"

      - name: Validate database schema
        run: npm run validate:database
        env:
          DATABASE_URL: "http://127.0.0.1:8080"

  # Test Summary and Reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, performance-tests, security-tests, database-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Blog Post Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.unit-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Database Tests: ${{ needs.database-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage and Quality" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports and test artifacts are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Blog Post Testing Results')
            );

            const testResults = {
              unit: '${{ needs.unit-integration-tests.result }}',
              e2e: '${{ needs.e2e-tests.result }}',
              performance: '${{ needs.performance-tests.result }}',
              security: '${{ needs.security-tests.result }}',
              database: '${{ needs.database-tests.result }}'
            };

            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                default: return '⚠️';
              }
            };

            const body = `## Blog Post Testing Results

            | Test Type | Status |
            |-----------|--------|
            | Unit & Integration | ${getEmoji(testResults.unit)} ${testResults.unit} |
            | End-to-End | ${getEmoji(testResults.e2e)} ${testResults.e2e} |
            | Performance | ${getEmoji(testResults.performance)} ${testResults.performance} |
            | Security | ${getEmoji(testResults.security)} ${testResults.security} |
            | Database | ${getEmoji(testResults.database)} ${testResults.database} |

            ### Test Coverage
            - Blog post access functionality
            - Database operations and queries
            - Route handling and redirects
            - SEO and meta tag generation
            - Performance and accessibility
            - Security validations

            *Updated: ${new Date().toISOString()}*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

# Deployment Tests (runs on main branch only)
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-integration-tests, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Run deployment validation
        run: npm run validate:all

      - name: Test production build
        run: |
          npm run preview &
          sleep 10
          curl -f http://localhost:4321/blog/test || exit 1

      - name: Notify deployment readiness
        run: |
          echo "✅ Blog post functionality validated for deployment" >> $GITHUB_STEP_SUMMARY
          echo "All tests passed and the build is ready for production deployment." >> $GITHUB_STEP_SUMMARY