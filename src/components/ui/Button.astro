---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  loading?: boolean;
  href?: string;
  target?: string;
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  type = 'button',
  disabled = false,
  loading = false,
  href,
  target,
  class: className = '',
  ...props
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-light transition-all duration-fast focus:outline-none focus:outline focus:outline-2 focus:outline-text-primary disabled:opacity-50 disabled:cursor-not-allowed';

const variantClasses = {
  primary: 'bg-primary text-text-primary border border-border-primary hover:bg-text-primary hover:text-primary',
  secondary: 'bg-secondary text-text-primary border border-border-primary hover:bg-primary hover:text-text-primary',
  outline: 'border border-border-primary text-text-primary bg-primary hover:bg-text-primary hover:text-primary',
  ghost: 'text-text-primary hover:bg-secondary',
  danger: 'bg-primary border border-border-primary text-text-primary hover:bg-text-primary hover:text-primary'
};

const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg'
};

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;

const Element = href ? 'a' : 'button';
const elementProps = href 
  ? { href, target, ...props }
  : { type, disabled: disabled || loading, ...props };
---

<Element class={classes} {...elementProps}>
  {loading && (
    <svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  )}
  <slot />
</Element>