---
// =============================================================================
// RELATED POSTS COMPONENT - Shows related blog posts with recommendations
// Uses intelligent scoring based on categories, tags, and content similarity
// =============================================================================

import type { BlogPost } from '@/lib/db/types';
import { db } from '@/lib/db/queries';
import BlogCard from './BlogCard.astro';

interface Props {
  currentPostId: number;
  currentPostSlug?: string;
  limit?: number;
  title?: string;
  showAsGrid?: boolean;
  cardVariant?: 'default' | 'compact' | 'minimal';
  className?: string;
}

const {
  currentPostId,
  currentPostSlug,
  limit = 3,
  title = 'Related Posts',
  showAsGrid = true,
  cardVariant = 'compact',
  className = '',
} = Astro.props;

//fetch related posts
let relatedPosts: BlogPost[] = [];

try {
  relatedPosts = await db.getRelatedPosts(currentPostId, limit);
} catch (error) {
  console.error('Failed to fetch related posts:', error);
  //fallback to recent posts if related posts fail
  try {
    const recentPosts = await db.getRecentBlogPosts(limit + 1);
    relatedPosts = recentPosts.filter(post => post.id !== currentPostId).slice(0, limit);
  } catch (fallbackError) {
    console.error('Failed to fetch fallback posts:', error);
  }
}

//determine layout classes
const gridClasses = showAsGrid
  ? `grid gap-6 ${
      limit === 1 ? 'grid-cols-1' :
      limit === 2 ? 'grid-cols-1 md:grid-cols-2' :
      limit === 3 ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' :
      'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
    }`
  : 'space-y-4';

//schema.org structured data for related posts
const structuredData = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "name": title,
  "numberOfItems": relatedPosts.length,
  "itemListElement": relatedPosts.map((post, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "item": {
      "@type": "BlogPosting",
      "headline": post.title,
      "url": `${Astro.url.origin}/blog/${post.slug}`,
      "datePublished": post.published_at,
      "dateModified": post.updated_at,
      "author": {
        "@type": "Person",
        "name": post.author_name,
      },
      ...(post.excerpt && { "description": post.excerpt }),
      ...(post.featured_image_url && { 
        "image": {
          "@type": "ImageObject",
          "url": post.featured_image_url
        }
      }),
    }
  }))
};
---

{relatedPosts.length > 0 && (
  <section class={`${className}`} aria-labelledby="related-posts-heading">
    
    <!-- Section Header -->
    <div class="mb-8">
      <h2 id="related-posts-heading" class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
        {title}
      </h2>
      <p class="text-gray-600 dark:text-gray-400 text-sm">
        Discover more content you might find interesting
      </p>
    </div>

    <!-- Related Posts Grid/List -->
    <div class={gridClasses}>
      {relatedPosts.map((post) => (
        <BlogCard
          post={post}
          variant={cardVariant}
          showExcerpt={cardVariant !== 'minimal'}
          showAuthor={cardVariant === 'default'}
          showDate={true}
          showCategories={cardVariant !== 'minimal'}
          showTags={false}
          showReadingTime={cardVariant === 'default'}
          showViewCount={false}
        />
      ))}
    </div>

    <!-- View All Link (if there might be more) -->
    {relatedPosts.length >= limit && (
      <div class="mt-8 text-center">
        <a 
          href="/blog" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/30 rounded-lg transition-colors duration-200"
        >
          <span>Explore all posts</span>
          <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
          </svg>
        </a>
      </div>
    )}

    <!-- Empty State -->
    {relatedPosts.length === 0 && (
      <div class="text-center py-12">
        <svg class="w-12 h-12 mx-auto text-gray-400 dark:text-gray-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
          No related posts found
        </h3>
        <p class="text-gray-600 dark:text-gray-400 mb-4">
          We couldn't find any posts related to this topic right now.
        </p>
        <a 
          href="/blog" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/30 rounded-lg transition-colors duration-200"
        >
          Browse all posts
        </a>
      </div>
    )}

    <!-- Structured Data -->
    {relatedPosts.length > 0 && (
      <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    )}

  </section>
)}

<!-- Loading State (for client-side usage) -->
<template id="related-posts-loading">
  <section class={`${className}`}>
    <div class="mb-8">
      <div class="h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse mb-2 w-48"></div>
      <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse w-64"></div>
    </div>
    
    <div class={gridClasses}>
      {Array.from({ length: limit }).map(() => (
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 animate-pulse">
          <div class="h-48 bg-gray-200 dark:bg-gray-700 rounded-lg mb-4"></div>
          <div class="space-y-3">
            <div class="flex space-x-2">
              <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded-full w-16"></div>
              <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded-full w-20"></div>
            </div>
            <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
            <div class="space-y-2">
              <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
              <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
            </div>
            <div class="flex justify-between items-center">
              <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
              <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </section>
</template>