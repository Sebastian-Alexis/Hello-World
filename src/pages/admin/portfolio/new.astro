---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../lib/db/queries.js';

//get available skills and categories for form
let skills, categories;

try {
  [skills, categories] = await Promise.all([
    db.getSkills(),
    db.getPortfolioCategories()
  ]);
} catch (error) {
  console.error('Portfolio form error:', error);
  skills = [];
  categories = [];
}
---

<AdminLayout title="New Project" description="Create a new portfolio project">
  <div class="max-w-4xl mx-auto">
    <!-- Form Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Create New Project</h1>
          <p class="text-gray-500 dark:text-gray-400 mt-1">Add a new project to your portfolio</p>
        </div>
        <div class="flex space-x-3">
          <a 
            href="/admin/portfolio" 
            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Cancel
          </a>
          <button 
            type="submit" 
            form="project-form"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Create Project
          </button>
        </div>
      </div>
    </div>

    <!-- Project Form -->
    <form id="project-form" class="space-y-8">
      <!-- Basic Information -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Basic Information</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Title -->
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Project Title *
            </label>
            <input 
              type="text" 
              name="title" 
              id="title" 
              required
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Enter project title"
            >
          </div>
          
          <!-- Slug -->
          <div>
            <label for="slug" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              URL Slug
            </label>
            <input 
              type="text" 
              name="slug" 
              id="slug" 
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="project-slug (auto-generated from title)"
            >
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Leave empty to auto-generate from title
            </p>
          </div>
          
          <!-- Description -->
          <div>
            <label for="short_description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Short Description *
            </label>
            <textarea 
              name="short_description" 
              id="short_description" 
              rows="3"
              required
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Brief description of the project (used in cards and previews)"
            ></textarea>
          </div>
          
          <!-- Category and Status -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Category
              </label>
              <select 
                name="category" 
                id="category" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Select category</option>
                {categories.map(category => (
                  <option value={category.id}>{category.name}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Status *
              </label>
              <select 
                name="status" 
                id="status" 
                required
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="active">Active</option>
                <option value="completed">Completed</option>
                <option value="archived">Archived</option>
                <option value="draft">Draft</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Project Details -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Project Details</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Full Description -->
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Full Description
            </label>
            <div id="description-editor" class="min-h-96"></div>
            <input type="hidden" name="description" id="description-input">
          </div>
          
          <!-- Technologies/Skills -->
          <div>
            <label for="skills" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Technologies & Skills
            </label>
            <div class="space-y-2">
              <div class="flex flex-wrap gap-2" id="selected-skills">
                <!-- Selected skills will appear here -->
              </div>
              <select 
                id="skills-select" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Add a technology or skill</option>
                {skills.map(skill => (
                  <option value={skill.id} data-name={skill.name} data-color={skill.color}>
                    {skill.name}
                  </option>
                ))}
              </select>
            </div>
            <input type="hidden" name="skills" id="skills-input">
          </div>
          
          <!-- Project Links -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="project_url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Live Project URL
              </label>
              <input 
                type="url" 
                name="project_url" 
                id="project_url" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="https://example.com"
              >
            </div>
            
            <div>
              <label for="github_url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                GitHub Repository URL
              </label>
              <input 
                type="url" 
                name="github_url" 
                id="github_url" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="https://github.com/username/repo"
              >
            </div>
          </div>
          
          <!-- Project Dates -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="start_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Start Date
              </label>
              <input 
                type="date" 
                name="start_date" 
                id="start_date" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
            </div>
            
            <div>
              <label for="end_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                End Date
              </label>
              <input 
                type="date" 
                name="end_date" 
                id="end_date" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                Leave empty if project is ongoing
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Media & Images -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Media & Images</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Featured Image -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Featured Image
            </label>
            <div id="featured-image-upload">
              <!-- MediaUpload component will be mounted here -->
            </div>
            <input type="hidden" name="featured_image" id="featured-image-input">
          </div>
          
          <!-- Project Gallery -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Project Gallery
            </label>
            <div id="gallery-upload">
              <!-- MediaUpload component will be mounted here -->
            </div>
            <input type="hidden" name="gallery" id="gallery-input">
            
            <!-- Gallery Preview -->
            <div id="gallery-preview" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4 hidden">
              <!-- Gallery images will appear here -->
            </div>
          </div>
        </div>
      </div>

      <!-- SEO & Metadata -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">SEO & Metadata</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Meta Title -->
          <div>
            <label for="meta_title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Meta Title
            </label>
            <input 
              type="text" 
              name="meta_title" 
              id="meta_title" 
              maxlength="60"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Leave empty to use project title"
            >
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span id="meta-title-length">0</span>/60 characters
            </p>
          </div>
          
          <!-- Meta Description -->
          <div>
            <label for="meta_description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Meta Description
            </label>
            <textarea 
              name="meta_description" 
              id="meta_description" 
              rows="3"
              maxlength="160"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Leave empty to use short description"
            ></textarea>
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span id="meta-description-length">0</span>/160 characters
            </p>
          </div>
          
          <!-- Featured Flag -->
          <div class="flex items-center">
            <input 
              type="checkbox" 
              name="featured" 
              id="featured" 
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            >
            <label for="featured" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
              Featured project (show on homepage and featured sections)
            </label>
          </div>
        </div>
      </div>
    </form>
  </div>
</AdminLayout>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    //initialize rich text editor for description
    const { default: EditorJS } = await import('@editorjs/editorjs');
    const Header = await import('@editorjs/header');
    const List = await import('@editorjs/list');
    const Code = await import('@editorjs/code');
    const Quote = await import('@editorjs/quote');
    const Image = await import('@editorjs/image');
    
    const descriptionEditor = new EditorJS({
      holder: 'description-editor',
      placeholder: 'Describe your project in detail...',
      tools: {
        header: Header.default,
        list: List.default,
        code: Code.default,
        quote: Quote.default,
        image: {
          class: Image.default,
          config: {
            endpoints: {
              byFile: '/api/admin/upload/image'
            },
            additionalRequestHeaders: {
              'Authorization': `Bearer ${localStorage.getItem('access_token')}`
            }
          }
        }
      },
      onChange: async () => {
        const outputData = await descriptionEditor.save();
        document.getElementById('description-input').value = JSON.stringify(outputData);
      }
    });
    
    //mount media upload components
    const MediaUpload = (await import('../../../components/admin/MediaUpload.svelte')).default;
    
    //featured image upload
    const featuredImageUpload = new MediaUpload({
      target: document.getElementById('featured-image-upload'),
      props: {
        accept: 'image/*',
        multiple: false,
        maxSize: 5 * 1024 * 1024 // 5MB
      }
    });
    
    featuredImageUpload.$on('success', (event) => {
      const file = event.detail.files[0];
      if (file) {
        document.getElementById('featured-image-input').value = file.url;
      }
    });
    
    //gallery upload
    const galleryUpload = new MediaUpload({
      target: document.getElementById('gallery-upload'),
      props: {
        accept: 'image/*',
        multiple: true,
        maxSize: 5 * 1024 * 1024 // 5MB
      }
    });
    
    let galleryImages = [];
    
    galleryUpload.$on('success', (event) => {
      galleryImages = galleryImages.concat(event.detail.files);
      updateGalleryInput();
      renderGalleryPreview();
    });
    
    function updateGalleryInput() {
      document.getElementById('gallery-input').value = JSON.stringify(galleryImages.map(img => img.url));
    }
    
    function renderGalleryPreview() {
      const preview = document.getElementById('gallery-preview');
      preview.innerHTML = '';
      
      if (galleryImages.length > 0) {
        preview.classList.remove('hidden');
        galleryImages.forEach((image, index) => {
          const div = document.createElement('div');
          div.className = 'relative group';
          div.innerHTML = `
            <img src="${image.url}" alt="Gallery image ${index + 1}" class="w-full h-24 object-cover rounded-lg">
            <button type="button" onclick="removeGalleryImage(${index})" class="absolute top-1 right-1 bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition-opacity">
              ×
            </button>
          `;
          preview.appendChild(div);
        });
      } else {
        preview.classList.add('hidden');
      }
    }
    
    window.removeGalleryImage = function(index) {
      galleryImages.splice(index, 1);
      updateGalleryInput();
      renderGalleryPreview();
    };
    
    //skills management
    const selectedSkills = new Set();
    const skillsSelect = document.getElementById('skills-select');
    const selectedSkillsContainer = document.getElementById('selected-skills');
    const skillsInput = document.getElementById('skills-input');
    
    skillsSelect.addEventListener('change', function() {
      if (this.value && !selectedSkills.has(this.value)) {
        const option = this.options[this.selectedIndex];
        const skillData = {
          id: this.value,
          name: option.dataset.name,
          color: option.dataset.color
        };
        
        selectedSkills.add(this.value);
        renderSelectedSkills();
        updateSkillsInput();
        
        this.value = '';
      }
    });
    
    function renderSelectedSkills() {
      selectedSkillsContainer.innerHTML = '';
      selectedSkills.forEach(skillId => {
        const option = skillsSelect.querySelector(`option[value="${skillId}"]`);
        if (option) {
          const skillTag = document.createElement('span');
          skillTag.className = 'inline-flex items-center px-3 py-1 rounded-full text-sm font-medium text-white';
          skillTag.style.backgroundColor = option.dataset.color || '#6B7280';
          skillTag.innerHTML = `
            ${option.dataset.name}
            <button type="button" class="ml-2 text-white hover:text-gray-200" onclick="removeSkill('${skillId}')">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
              </svg>
            </button>
          `;
          selectedSkillsContainer.appendChild(skillTag);
        }
      });
    }
    
    function updateSkillsInput() {
      skillsInput.value = JSON.stringify(Array.from(selectedSkills));
    }
    
    window.removeSkill = function(skillId) {
      selectedSkills.delete(skillId);
      renderSelectedSkills();
      updateSkillsInput();
    };
    
    //auto-generate slug from title
    const titleInput = document.getElementById('title');
    const slugInput = document.getElementById('slug');
    
    titleInput.addEventListener('input', function() {
      if (!slugInput.value || slugInput.dataset.autoGenerated) {
        const slug = this.value
          .toLowerCase()
          .replace(/[^a-z0-9\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();
        slugInput.value = slug;
        slugInput.dataset.autoGenerated = 'true';
      }
    });
    
    slugInput.addEventListener('input', function() {
      delete this.dataset.autoGenerated;
    });
    
    //character counters
    function setupCharacterCounter(inputId, counterId, maxLength) {
      const input = document.getElementById(inputId);
      const counter = document.getElementById(counterId);
      
      input.addEventListener('input', function() {
        const length = this.value.length;
        counter.textContent = length;
        counter.parentElement.classList.toggle('text-red-500', length > maxLength * 0.9);
      });
    }
    
    setupCharacterCounter('meta_title', 'meta-title-length', 60);
    setupCharacterCounter('meta_description', 'meta-description-length', 160);
    
    //form submission
    document.getElementById('project-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      //save editor content
      const descriptionData = await descriptionEditor.save();
      document.getElementById('description-input').value = JSON.stringify(descriptionData);
      
      const formData = new FormData(this);
      
      try {
        const response = await fetch('/api/admin/portfolio', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
          },
          body: formData
        });
        
        if (response.ok) {
          const result = await response.json();
          window.location.href = `/admin/portfolio/${result.id}`;
        } else {
          alert('Failed to create project');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        alert('Failed to create project');
      }
    });
  });
</script>