---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../lib/db/queries.js';

//get query parameters
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const search = url.searchParams.get('search') || '';
const status = url.searchParams.get('status') || 'all';
const category = url.searchParams.get('category') || '';
const sortBy = url.searchParams.get('sort') || 'created_at';
const sortOrder = url.searchParams.get('order') || 'DESC';

let posts, totalPosts, categories, stats;

try {
  //get blog posts with filters
  const result = await db.getBlogPosts({
    page,
    limit: 20,
    search,
    status: status !== 'all' ? status : undefined,
    category: category || undefined,
    sortBy,
    sortOrder
  });
  
  posts = result.data;
  totalPosts = result.pagination.total;
  
  //get categories for filter
  categories = await db.getBlogCategories();
  
  //get quick stats - TODO: implement getBlogStatistics in queries.ts
  stats = {
    totalPosts: result.pagination.total || 0,
    publishedPosts: result.data.filter(p => p.status === 'published').length || 0,
    draftPosts: result.data.filter(p => p.status === 'draft').length || 0
  };
} catch (error) {
  console.error('Blog management error:', error);
  posts = [];
  totalPosts = 0;
  categories = [];
  stats = { totalPosts: 0, publishedPosts: 0, draftPosts: 0 };
}

const totalPages = Math.ceil(totalPosts / 20);

// Build pagination links
const paginationLinks = [];
const startPage = Math.max(1, Math.min(totalPages - 4, page - 2));

for (let i = 0; i < Math.min(5, totalPages); i++) {
  const pageNum = startPage + i;
  if (pageNum <= totalPages) {
    paginationLinks.push({
      pageNum,
      href: `?page=${pageNum}&search=${search}&status=${status}&category=${category}&sort=${sortBy}&order=${sortOrder}`,
      isActive: pageNum === page
    });
  }
}
---

<AdminLayout title="Blog Posts" description="Manage your blog posts and content">
  <!-- Header Actions -->
  <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
    <div class="flex items-center space-x-4">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Blog Posts</h1>
      <div class="flex space-x-2">
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
          {stats.publishedPosts} Published
        </span>
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
          {stats.draftPosts} Drafts
        </span>
      </div>
    </div>
    <div class="flex space-x-3">
      <a 
        href="/admin/blog/new" 
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
        </svg>
        New Post
      </a>
      <button 
        id="bulk-actions-btn" 
        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
        disabled
      >
        Bulk Actions
      </button>
    </div>
  </div>

  <!-- Filters -->
  <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 mb-6">
    <form method="GET" class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <!-- Search -->
      <div>
        <label for="search" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Search
        </label>
        <input 
          type="text" 
          name="search" 
          id="search" 
          value={search}
          placeholder="Search posts..."
          class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
        >
      </div>
      
      <!-- Status Filter -->
      <div>
        <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Status
        </label>
        <select 
          name="status" 
          id="status" 
          class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
        >
          <option value="all" selected={status === 'all'}>All Status</option>
          <option value="published" selected={status === 'published'}>Published</option>
          <option value="draft" selected={status === 'draft'}>Draft</option>
          <option value="archived" selected={status === 'archived'}>Archived</option>
        </select>
      </div>
      
      <!-- Category Filter -->
      <div>
        <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Category
        </label>
        <select 
          name="category" 
          id="category" 
          class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
        >
          <option value="" selected={category === ''}>All Categories</option>
          {categories.map(cat => (
            <option value={cat.slug} selected={category === cat.slug}>
              {cat.name}
            </option>
          ))}
        </select>
      </div>
      
      <!-- Sort Options -->
      <div>
        <label for="sort" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Sort By
        </label>
        <div class="flex space-x-2">
          <select 
            name="sort" 
            id="sort" 
            class="flex-1 rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          >
            <option value="created_at" selected={sortBy === 'created_at'}>Date Created</option>
            <option value="published_at" selected={sortBy === 'published_at'}>Date Published</option>
            <option value="title" selected={sortBy === 'title'}>Title</option>
            <option value="view_count" selected={sortBy === 'view_count'}>Views</option>
          </select>
          <select 
            name="order" 
            class="rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          >
            <option value="DESC" selected={sortOrder === 'DESC'}>↓</option>
            <option value="ASC" selected={sortOrder === 'ASC'}>↑</option>
          </select>
        </div>
      </div>
      
      <!-- Filter Actions -->
      <div class="md:col-span-4 flex justify-end space-x-3">
        <button 
          type="submit" 
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Apply Filters
        </button>
        <a 
          href="/admin/blog" 
          class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Clear
        </a>
      </div>
    </form>
  </div>

  <!-- Posts Table -->
  <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
    {posts.length > 0 ? (
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th scope="col" class="px-6 py-3 text-left">
                <input 
                  type="checkbox" 
                  id="select-all"
                  class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
                >
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Post
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Status
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Category
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Views
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Date
              </th>
              <th scope="col" class="relative px-6 py-3">
                <span class="sr-only">Actions</span>
              </th>
            </tr>
          </thead>
          <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
            {posts.map(post => (
              <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                <td class="px-6 py-4 whitespace-nowrap">
                  <input 
                    type="checkbox" 
                    class="post-checkbox rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
                    value={post.id}
                  >
                </td>
                <td class="px-6 py-4">
                  <div class="flex items-center">
                    {post.featured_image && (
                      <img 
                        class="h-10 w-10 rounded-lg object-cover mr-3" 
                        src={post.featured_image} 
                        alt={post.title}
                      >
                    )}
                    <div>
                      <div class="text-sm font-medium text-gray-900 dark:text-white">
                        {post.title}
                      </div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">
                        {post.excerpt ? post.excerpt.substring(0, 60) + '...' : 'No excerpt'}
                      </div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    post.status === 'published' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
                    post.status === 'draft' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                    'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
                  }`}>
                    {post.status}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                  {post.category_name || 'Uncategorized'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                  {post.view_count.toLocaleString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  {new Date(post.published_at || post.created_at).toLocaleDateString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex justify-end space-x-2">
                    <a 
                      href={`/blog/${post.slug}`} 
                      target="_blank"
                      class="text-blue-600 dark:text-blue-400 hover:text-blue-900 dark:hover:text-blue-200"
                      title="View post"
                    >
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"/>
                      </svg>
                    </a>
                    <a 
                      href={`/admin/blog/${post.id}`}
                      class="text-green-600 dark:text-green-400 hover:text-green-900 dark:hover:text-green-200"
                      title="Edit post"
                    >
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
                      </svg>
                    </a>
                    <button 
                      class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-200"
                      title="Delete post"
                      onclick={`confirmDelete(${post.id}, '${post.title}')`}
                    >
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9zM4 5a2 2 0 012-2h8a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zM8 7a1 1 0 012 0v4a1 1 0 11-2 0V7zm4 0a1 1 0 112 0v4a1 1 0 11-2 0V7z" clip-rule="evenodd"/>
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    ) : (
      <div class="text-center py-12">
        <svg class="w-12 h-12 mx-auto text-gray-400 mb-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z" clip-rule="evenodd"/>
        </svg>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No posts found</h3>
        <p class="text-gray-500 dark:text-gray-400 mb-4">
          {search || status !== 'all' || category 
            ? 'Try adjusting your filters or search terms.'
            : 'Get started by creating your first blog post.'
          }
        </p>
        <a 
          href="/admin/blog/new" 
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Create New Post
        </a>
      </div>
    )}
  </div>

  <!-- Pagination -->
  {totalPages > 1 && (
    <div class="flex items-center justify-between mt-6">
      <div class="text-sm text-gray-700 dark:text-gray-300">
        Showing {((page - 1) * 20) + 1} to {Math.min(page * 20, totalPosts)} of {totalPosts} posts
      </div>
      <nav class="flex space-x-2">
        {page > 1 && (
          <a 
            href={`?page=${page - 1}&search=${search}&status=${status}&category=${category}&sort=${sortBy}&order=${sortOrder}`}
            class="px-3 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Previous
          </a>
        )}
        
        {/* Page Numbers */}
        {paginationLinks.map((link) => (
          <a 
            href={link.href}
            class={`px-3 py-2 border text-sm font-medium rounded-md ${
              link.isActive 
                ? 'border-blue-500 text-blue-600 bg-blue-50 dark:bg-blue-900 dark:text-blue-200' 
                : 'border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700'
            }`}
          >
            {link.pageNum}
          </a>
        ))}
        
        {page < totalPages && (
          <a 
            href={`?page=${page + 1}&search=${search}&status=${status}&category=${category}&sort=${sortBy}&order=${sortOrder}`}
            class="px-3 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Next
          </a>
        )}
      </nav>
    </div>
  )}
</AdminLayout>

<!-- Bulk Actions Modal -->
<div id="bulk-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
    <div class="mt-3 text-center">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white">Bulk Actions</h3>
      <div class="mt-4 space-y-3">
        <button id="bulk-publish" class="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
          Publish Selected
        </button>
        <button id="bulk-draft" class="w-full px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700">
          Move to Draft
        </button>
        <button id="bulk-delete" class="w-full px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
          Delete Selected
        </button>
      </div>
      <div class="mt-4">
        <button id="close-bulk-modal" class="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-400 dark:hover:bg-gray-500">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
    <div class="mt-3 text-center">
      <svg class="w-12 h-12 mx-auto text-red-600 mb-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9zM4 5a2 2 0 012-2h8a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zM8 7a1 1 0 012 0v4a1 1 0 11-2 0V7zm4 0a1 1 0 112 0v4a1 1 0 11-2 0V7z" clip-rule="evenodd"/>
      </svg>
      <h3 class="text-lg font-medium text-gray-900 dark:text-white">Delete Post</h3>
      <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
        Are you sure you want to delete "<span id="delete-post-title"></span>"? This action cannot be undone.
      </p>
      <div class="mt-6 flex justify-center space-x-3">
        <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
          Delete
        </button>
        <button id="cancel-delete" class="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-400 dark:hover:bg-gray-500">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  //bulk actions functionality
  document.addEventListener('DOMContentLoaded', function() {
    const selectAllCheckbox = document.getElementById('select-all');
    const postCheckboxes = document.querySelectorAll('.post-checkbox');
    const bulkActionsBtn = document.getElementById('bulk-actions-btn');
    const bulkModal = document.getElementById('bulk-modal');
    const deleteModal = document.getElementById('delete-modal');
    
    let selectedPosts = [];
    let postToDelete = null;
    
    //handle select all
    selectAllCheckbox?.addEventListener('change', function() {
      postCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateBulkActions();
    });
    
    //handle individual selections
    postCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateBulkActions);
    });
    
    function updateBulkActions() {
      selectedPosts = Array.from(postCheckboxes)
        .filter(cb => cb.checked)
        .map(cb => cb.value);
      
      bulkActionsBtn.disabled = selectedPosts.length === 0;
      bulkActionsBtn.textContent = selectedPosts.length > 0 
        ? `Bulk Actions (${selectedPosts.length})` 
        : 'Bulk Actions';
    }
    
    //show bulk actions modal
    bulkActionsBtn?.addEventListener('click', function() {
      if (selectedPosts.length > 0) {
        bulkModal.classList.remove('hidden');
      }
    });
    
    //close bulk modal
    document.getElementById('close-bulk-modal')?.addEventListener('click', function() {
      bulkModal.classList.add('hidden');
    });
    
    //delete confirmation
    window.confirmDelete = function(postId, postTitle) {
      postToDelete = postId;
      document.getElementById('delete-post-title').textContent = postTitle;
      deleteModal.classList.remove('hidden');
    };
    
    //cancel delete
    document.getElementById('cancel-delete')?.addEventListener('click', function() {
      deleteModal.classList.add('hidden');
      postToDelete = null;
    });
    
    //confirm delete
    document.getElementById('confirm-delete')?.addEventListener('click', async function() {
      if (postToDelete) {
        try {
          const response = await fetch(`/api/admin/blog/${postToDelete}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('access_token')}`
            }
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Failed to delete post');
          }
        } catch (error) {
          console.error('Delete error:', error);
          alert('Failed to delete post');
        }
      }
    });
    
    //bulk actions
    document.getElementById('bulk-publish')?.addEventListener('click', () => performBulkAction('publish'));
    document.getElementById('bulk-draft')?.addEventListener('click', () => performBulkAction('draft'));
    document.getElementById('bulk-delete')?.addEventListener('click', () => performBulkAction('delete'));
    
    async function performBulkAction(action) {
      try {
        const response = await fetch('/api/admin/blog/bulk', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
          },
          body: JSON.stringify({
            action,
            postIds: selectedPosts
          })
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          alert(`Failed to ${action} posts`);
        }
      } catch (error) {
        console.error('Bulk action error:', error);
        alert(`Failed to ${action} posts`);
      }
    }
  });
</script>