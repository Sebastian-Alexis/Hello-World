---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../lib/db/queries.js';

//get categories and tags for form
let categories, tags;

try {
  [categories, tags] = await Promise.all([
    db.getBlogCategories(),
    db.getBlogTags()
  ]);
} catch (error) {
  console.error('Blog form error:', error);
  categories = [];
  tags = [];
}
---

<AdminLayout title="New Blog Post" description="Create a new blog post">
  <div class="max-w-4xl mx-auto">
    <!-- Form Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Create New Blog Post</h1>
          <p class="text-gray-500 dark:text-gray-400 mt-1">Write and publish a new blog post</p>
        </div>
        <div class="flex space-x-3">
          <a 
            href="/admin/blog" 
            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Cancel
          </a>
          <button 
            type="button" 
            id="save-draft-btn"
            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Save Draft
          </button>
          <button 
            type="submit" 
            form="blog-form"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Publish Post
          </button>
        </div>
      </div>
    </div>

    <!-- Blog Post Form -->
    <form id="blog-form" class="space-y-8">
      <!-- Basic Information -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Basic Information</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Title -->
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Post Title *
            </label>
            <input 
              type="text" 
              name="title" 
              id="title" 
              required
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Enter blog post title"
            >
          </div>
          
          <!-- Slug -->
          <div>
            <label for="slug" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              URL Slug
            </label>
            <input 
              type="text" 
              name="slug" 
              id="slug" 
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="post-slug (auto-generated from title)"
            >
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Leave empty to auto-generate from title
            </p>
          </div>
          
          <!-- Excerpt -->
          <div>
            <label for="excerpt" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Excerpt
            </label>
            <textarea 
              name="excerpt" 
              id="excerpt" 
              rows="3"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Brief description of the post (used in previews and search results)"
            ></textarea>
          </div>
          
          <!-- Category and Status -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Category
              </label>
              <select 
                name="category" 
                id="category" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Select category</option>
                {categories.map(category => (
                  <option value={category.id}>{category.name}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Status *
              </label>
              <select 
                name="status" 
                id="status" 
                required
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="draft">Draft</option>
                <option value="published">Published</option>
                <option value="archived">Archived</option>
              </select>
            </div>
          </div>
          
          <!-- Tags -->
          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Tags
            </label>
            <div class="space-y-2">
              <div class="flex flex-wrap gap-2" id="selected-tags">
                <!-- Selected tags will appear here -->
              </div>
              <select 
                id="tags-select" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Add a tag</option>
                {tags.map(tag => (
                  <option value={tag.id} data-name={tag.name}>
                    {tag.name}
                  </option>
                ))}
              </select>
            </div>
            <input type="hidden" name="tags" id="tags-input">
          </div>
        </div>
      </div>

      <!-- Content -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Content</h3>
        </div>
        <div class="p-6">
          <div id="blog-editor"></div>
          <input type="hidden" name="content" id="content-input">
        </div>
      </div>

      <!-- Featured Image -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Featured Image</h3>
        </div>
        <div class="p-6">
          <div id="featured-image-upload">
            <!-- MediaUpload component will be mounted here -->
          </div>
          <input type="hidden" name="featured_image" id="featured-image-input">
          
          <!-- Featured Image Preview -->
          <div id="featured-image-preview" class="mt-4 hidden">
            <img id="featured-image-display" class="w-full max-w-md rounded-lg shadow-sm" alt="Featured image preview">
            <button type="button" id="remove-featured-image" class="mt-2 text-sm text-red-600 hover:text-red-800">
              Remove featured image
            </button>
          </div>
        </div>
      </div>

      <!-- Publishing Options -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Publishing Options</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Publish Date -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="publish_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Publish Date
              </label>
              <input 
                type="datetime-local" 
                name="publish_date" 
                id="publish_date" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                Leave empty to publish immediately
              </p>
            </div>
            
            <div>
              <label for="reading_time" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Reading Time (minutes)
              </label>
              <input 
                type="number" 
                name="reading_time" 
                id="reading_time" 
                min="1"
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="Auto-calculated"
              >
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                Leave empty for auto-calculation
              </p>
            </div>
          </div>
          
          <!-- Featured Flag -->
          <div class="flex items-center">
            <input 
              type="checkbox" 
              name="featured" 
              id="featured" 
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            >
            <label for="featured" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
              Featured post (show on homepage and featured sections)
            </label>
          </div>
        </div>
      </div>

      <!-- SEO & Metadata -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">SEO & Metadata</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Meta Title -->
          <div>
            <label for="meta_title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Meta Title
            </label>
            <input 
              type="text" 
              name="meta_title" 
              id="meta_title" 
              maxlength="60"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Leave empty to use post title"
            >
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span id="meta-title-length">0</span>/60 characters
            </p>
          </div>
          
          <!-- Meta Description -->
          <div>
            <label for="meta_description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Meta Description
            </label>
            <textarea 
              name="meta_description" 
              id="meta_description" 
              rows="3"
              maxlength="160"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Leave empty to use excerpt"
            ></textarea>
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span id="meta-description-length">0</span>/160 characters
            </p>
          </div>
        </div>
      </div>
    </form>
  </div>
</AdminLayout>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    //dynamically import and mount the BlogEditor component
    const BlogEditor = (await import('../../components/admin/BlogEditor.svelte')).default;
    const MediaUpload = (await import('../../components/admin/MediaUpload.svelte')).default;
    
    //mount blog editor
    let blogEditorInstance;
    try {
      blogEditorInstance = new BlogEditor({
        target: document.getElementById('blog-editor'),
        props: {
          content: '',
          placeholder: 'Start writing your blog post...'
        }
      });
      
      blogEditorInstance.$on('change', (event) => {
        document.getElementById('content-input').value = event.detail.content;
      });
    } catch (error) {
      console.error('Blog editor mount error:', error);
    }
    
    //mount media upload for featured image
    let mediaUploadInstance;
    try {
      mediaUploadInstance = new MediaUpload({
        target: document.getElementById('featured-image-upload'),
        props: {
          accept: 'image/*',
          multiple: false,
          maxSize: 5 * 1024 * 1024 // 5MB
        }
      });
      
      mediaUploadInstance.$on('success', (event) => {
        const file = event.detail.files[0];
        if (file) {
          document.getElementById('featured-image-input').value = file.url;
          document.getElementById('featured-image-display').src = file.url;
          document.getElementById('featured-image-preview').classList.remove('hidden');
        }
      });
      
      mediaUploadInstance.$on('error', (event) => {
        alert(event.detail.message);
      });
    } catch (error) {
      console.error('Media upload mount error:', error);
    }
    
    //remove featured image
    document.getElementById('remove-featured-image')?.addEventListener('click', function() {
      document.getElementById('featured-image-input').value = '';
      document.getElementById('featured-image-preview').classList.add('hidden');
    });
    
    //tags management
    const selectedTags = new Set();
    const tagsSelect = document.getElementById('tags-select');
    const selectedTagsContainer = document.getElementById('selected-tags');
    const tagsInput = document.getElementById('tags-input');
    
    tagsSelect.addEventListener('change', function() {
      if (this.value && !selectedTags.has(this.value)) {
        const option = this.options[this.selectedIndex];
        const tagData = {
          id: this.value,
          name: option.dataset.name
        };
        
        selectedTags.add(this.value);
        renderSelectedTags();
        updateTagsInput();
        
        this.value = '';
      }
    });
    
    function renderSelectedTags() {
      selectedTagsContainer.innerHTML = '';
      selectedTags.forEach(tagId => {
        const option = tagsSelect.querySelector(`option[value="${tagId}"]`);
        if (option) {
          const tagSpan = document.createElement('span');
          tagSpan.className = 'inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
          tagSpan.innerHTML = `
            ${option.dataset.name}
            <button type="button" class="ml-2 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200" onclick="removeTag('${tagId}')">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
              </svg>
            </button>
          `;
          selectedTagsContainer.appendChild(tagSpan);
        }
      });
    }
    
    function updateTagsInput() {
      tagsInput.value = JSON.stringify(Array.from(selectedTags));
    }
    
    window.removeTag = function(tagId) {
      selectedTags.delete(tagId);
      renderSelectedTags();
      updateTagsInput();
    };
    
    //auto-generate slug from title
    const titleInput = document.getElementById('title');
    const slugInput = document.getElementById('slug');
    
    titleInput.addEventListener('input', function() {
      if (!slugInput.value || slugInput.dataset.autoGenerated) {
        const slug = this.value
          .toLowerCase()
          .replace(/[^a-z0-9\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();
        slugInput.value = slug;
        slugInput.dataset.autoGenerated = 'true';
      }
    });
    
    slugInput.addEventListener('input', function() {
      delete this.dataset.autoGenerated;
    });
    
    //character counters
    function setupCharacterCounter(inputId, counterId, maxLength) {
      const input = document.getElementById(inputId);
      const counter = document.getElementById(counterId);
      
      input.addEventListener('input', function() {
        const length = this.value.length;
        counter.textContent = length;
        counter.parentElement.classList.toggle('text-red-500', length > maxLength * 0.9);
      });
    }
    
    setupCharacterCounter('meta_title', 'meta-title-length', 60);
    setupCharacterCounter('meta_description', 'meta-description-length', 160);
    
    //save draft functionality
    document.getElementById('save-draft-btn').addEventListener('click', async function() {
      document.getElementById('status').value = 'draft';
      await submitForm();
    });
    
    //form submission
    document.getElementById('blog-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      await submitForm();
    });
    
    async function submitForm() {
      //save editor content
      if (blogEditorInstance) {
        try {
          const editorData = await blogEditorInstance.save();
          document.getElementById('content-input').value = JSON.stringify(editorData);
        } catch (error) {
          console.error('Editor save error:', error);
        }
      }
      
      const formData = new FormData(document.getElementById('blog-form'));
      
      try {
        const response = await fetch('/api/admin/blog', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
          },
          body: formData
        });
        
        if (response.ok) {
          const result = await response.json();
          window.location.href = `/admin/blog/${result.id}`;
        } else {
          alert('Failed to create blog post');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        alert('Failed to create blog post');
      }
    }
  });
</script>