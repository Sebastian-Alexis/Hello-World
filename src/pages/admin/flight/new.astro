---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../lib/db/queries.js';

// Get airlines, airports, and trips for form dropdowns
let airlines, airports, trips;

try {
  [airlines, airports, trips] = await Promise.all([
    db.getAirlines(),
    db.getAirports(),
    db.getTrips()
  ]);
} catch (error) {
  console.error('Flight form error:', error);
  airlines = [];
  airports = [];
  trips = [];
}
---

<AdminLayout title="Add New Flight" description="Record a new flight in your travel log">
  <div class="max-w-4xl mx-auto">
    <!-- Form Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Add New Flight</h1>
          <p class="text-gray-500 dark:text-gray-400 mt-1">Record your flight details and travel experience</p>
        </div>
        <div class="flex space-x-3">
          <a 
            href="/admin/flights" 
            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Cancel
          </a>
          <button 
            type="submit" 
            form="flight-form"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Save Flight
          </button>
        </div>
      </div>
    </div>

    <!-- Flight Form -->
    <form id="flight-form" class="space-y-8">
      <!-- Flight Details -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Flight Details</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Flight Number and Fetch Button -->
          <div>
            <label for="flight_number" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Flight Number *
            </label>
            <div class="flex space-x-2">
              <input 
                type="text" 
                name="flight_number" 
                id="flight_number" 
                required
                class="flex-1 block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="e.g., AA1234, UA456"
              >
              <button
                type="button"
                id="fetch-flight-btn"
                class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                Fetch Flight Data
              </button>
            </div>
          </div>
          
          <!-- Airline -->
          <div>
            <label for="airline_name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Airline *
            </label>
            <input 
              type="text" 
              name="airline_name" 
              id="airline_name" 
              required
              list="airlines-list"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="e.g., American Airlines, United"
            >
            <input type="hidden" name="airline_code" id="airline_code">
            <datalist id="airlines-list">
              {airlines.map(airline => (
                <option value={airline.name} data-code={airline.iata_code}>{airline.name}</option>
              ))}
            </datalist>
          </div>
          
          <!-- Origin and Destination -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="departure_airport" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Departure Airport *
              </label>
              <input 
                type="text" 
                name="departure_airport" 
                id="departure_airport" 
                required
                list="airports-list"
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="Search airport name or code..."
              >
              <input type="hidden" name="departure_airport_id" id="departure_airport_id" required>
            </div>
            
            <div>
              <label for="arrival_airport" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Arrival Airport *
              </label>
              <input 
                type="text" 
                name="arrival_airport" 
                id="arrival_airport" 
                required
                list="airports-list"
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="Search airport name or code..."
              >
              <input type="hidden" name="arrival_airport_id" id="arrival_airport_id" required>
            </div>
          </div>
          
          <datalist id="airports-list">
            {airports.map(airport => (
              <option value={`${airport.iata_code} - ${airport.name}, ${airport.city}`} data-id={airport.id}>
                {airport.iata_code} - {airport.name}, {airport.city}, {airport.country}
              </option>
            ))}
          </datalist>
          
          <!-- Departure and Arrival Times -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="departure_time" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Departure Time *
              </label>
              <input 
                type="datetime-local" 
                name="departure_time" 
                id="departure_time" 
                required
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
            </div>
            
            <div>
              <label for="arrival_time" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Arrival Time *
              </label>
              <input 
                type="datetime-local" 
                name="arrival_time" 
                id="arrival_time" 
                required
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
            </div>
          </div>
          
          <!-- Aircraft and Seat -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="aircraft_type" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Aircraft Type
              </label>
              <input 
                type="text" 
                name="aircraft_type" 
                id="aircraft_type" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="e.g., Boeing 737, Airbus A320"
              >
            </div>
            
            <div>
              <label for="seat_number" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Seat Number
              </label>
              <input 
                type="text" 
                name="seat_number" 
                id="seat_number" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="e.g., 12A, 27F"
              >
            </div>
          </div>
        </div>
      </div>

      <!-- Flight Experience -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Flight Experience</h3>
        </div>
        <div class="p-6 space-y-6">
          <!-- Class and Status -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label for="class" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Travel Class
              </label>
              <select 
                name="class" 
                id="class" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Select class</option>
                <option value="economy">Economy</option>
                <option value="premium_economy">Premium Economy</option>
                <option value="business">Business</option>
                <option value="first">First Class</option>
              </select>
            </div>
            
            <div>
              <label for="flight_status" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Flight Status
              </label>
              <select 
                name="flight_status" 
                id="flight_status" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="completed" selected>Completed</option>
                <option value="booked">Booked</option>
                <option value="cancelled">Cancelled</option>
                <option value="delayed">Delayed</option>
              </select>
            </div>
            
            <div>
              <label for="trip_purpose" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Trip Purpose
              </label>
              <select 
                name="trip_purpose" 
                id="trip_purpose" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Select purpose</option>
                <option value="business">Business</option>
                <option value="vacation">Vacation</option>
                <option value="personal">Personal</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
          
          <!-- Trip Association -->
          <div>
            <label for="trip_id" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Associated Trip
            </label>
            <select 
              name="trip_id" 
              id="trip_id" 
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
            >
              <option value="">No trip selected</option>
              {trips.map(trip => (
                <option value={trip.id}>
                  {trip.name} ({new Date(trip.start_date).toLocaleDateString()} - {new Date(trip.end_date).toLocaleDateString()})
                </option>
              ))}
            </select>
          </div>
          
          <!-- Price and Booking -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="ticket_price" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Ticket Price ($)
              </label>
              <input 
                type="number" 
                name="ticket_price" 
                id="ticket_price" 
                min="0"
                step="0.01"
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="0.00"
              >
            </div>
            
            <div>
              <label for="booking_reference" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Booking Reference
              </label>
              <input 
                type="text" 
                name="booking_reference" 
                id="booking_reference" 
                class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="e.g., ABC123, XYZ789"
              >
            </div>
          </div>
        </div>
      </div>

      <!-- Flight Notes -->
      <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Notes</h3>
        </div>
        <div class="p-6">
          <div>
            <label for="notes" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Flight Notes
            </label>
            <textarea 
              name="notes" 
              id="notes" 
              rows="4"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Any notes about this flight - delays, experiences, observations..."
            ></textarea>
          </div>
          
          <!-- Favorite Flight Toggle -->
          <div class="mt-4">
            <label class="inline-flex items-center">
              <input 
                type="checkbox" 
                name="is_favorite" 
                id="is_favorite"
                class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              >
              <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Mark as favorite flight</span>
            </label>
          </div>
        </div>
      </div>
    </form>
  </div>
</AdminLayout>

<script>
  // Make airports data globally available for form processing
  window.airportsData = ${JSON.stringify(airports)};
  
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('flight-form');
    const fetchBtn = document.getElementById('fetch-flight-btn');
    
    // Airport input handling
    const departureInput = document.getElementById('departure_airport');
    const arrivalInput = document.getElementById('arrival_airport');
    const departureIdInput = document.getElementById('departure_airport_id');
    const arrivalIdInput = document.getElementById('arrival_airport_id');
    
    // Update hidden airport ID when airport is selected
    function updateAirportId(input, idInput) {
      const value = input.value;
      const datalist = document.getElementById('airports-list');
      const option = Array.from(datalist.options).find(opt => opt.value === value);
      
      if (option) {
        idInput.value = option.dataset.id;
      } else {
        // Try to find by IATA code only
        const iataMatch = value.match(/^([A-Z]{3})/);
        if (iataMatch) {
          const airport = window.airportsData.find(a => a.iata_code === iataMatch[1]);
          if (airport) {
            idInput.value = airport.id;
          }
        }
      }
    }
    
    departureInput.addEventListener('change', () => updateAirportId(departureInput, departureIdInput));
    arrivalInput.addEventListener('change', () => updateAirportId(arrivalInput, arrivalIdInput));
    
    // Airline code handling
    const airlineInput = document.getElementById('airline_name');
    const airlineCodeInput = document.getElementById('airline_code');
    
    airlineInput.addEventListener('change', function() {
      const datalist = document.getElementById('airlines-list');
      const option = Array.from(datalist.options).find(opt => opt.value === this.value);
      if (option) {
        airlineCodeInput.value = option.dataset.code;
      }
    });
    
    // Fetch flight data button
    fetchBtn.addEventListener('click', async function() {
      const flightNumber = document.getElementById('flight_number').value;
      if (!flightNumber) {
        alert('Please enter a flight number first');
        return;
      }
      
      // Show loading state
      fetchBtn.disabled = true;
      fetchBtn.textContent = 'Fetching...';
      
      try {
        const response = await fetch('/api/flights/fetch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            flightIata: flightNumber,
            flightDate: new Date().toISOString().split('T')[0], // Today's date
          }),
        });
        
        const result = await response.json();
        
        if (result.success && result.data) {
          // Populate form fields with fetched data
          const data = result.data;
          
          document.getElementById('airline_name').value = data.airline_name || '';
          document.getElementById('airline_code').value = data.airline_code || '';
          document.getElementById('aircraft_type').value = data.aircraft_type || '';
          
          // Set airports
          if (data.departure_airport_name) {
            document.getElementById('departure_airport').value = `${data.departure_iata} - ${data.departure_airport_name}`;
            document.getElementById('departure_airport_id').value = data.departure_airport_id;
          }
          
          if (data.arrival_airport_name) {
            document.getElementById('arrival_airport').value = `${data.arrival_iata} - ${data.arrival_airport_name}`;
            document.getElementById('arrival_airport_id').value = data.arrival_airport_id;
          }
          
          // Set times
          if (data.departure_time) {
            const depTime = new Date(data.departure_time);
            document.getElementById('departure_time').value = depTime.toISOString().slice(0, 16);
          }
          
          if (data.arrival_time) {
            const arrTime = new Date(data.arrival_time);
            document.getElementById('arrival_time').value = arrTime.toISOString().slice(0, 16);
          }
          
          // Set flight status
          if (data.flight_status) {
            document.getElementById('flight_status').value = data.flight_status;
          }
          
          alert('Flight data fetched successfully!');
        } else {
          alert(result.error || 'Failed to fetch flight data');
        }
      } catch (error) {
        console.error('Fetch error:', error);
        alert('Failed to fetch flight data. Please try again.');
      } finally {
        // Reset button state
        fetchBtn.disabled = false;
        fetchBtn.innerHTML = '<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>Fetch Flight Data';
      }
    });
    
    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = form.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      
      try {
        // Validate required fields
        if (!departureIdInput.value || !arrivalIdInput.value) {
          throw new Error('Please select valid departure and arrival airports');
        }
        
        // Disable submit button and show loading state
        submitBtn.disabled = true;
        submitBtn.textContent = 'Saving...';
        
        const formData = new FormData(form);
        
        // Build flight data object
        const flightData = {
          flight_number: formData.get('flight_number'),
          airline_code: formData.get('airline_code') || null,
          airline_name: formData.get('airline_name'),
          aircraft_type: formData.get('aircraft_type') || null,
          departure_airport_id: parseInt(departureIdInput.value),
          arrival_airport_id: parseInt(arrivalIdInput.value),
          departure_time: formData.get('departure_time'),
          arrival_time: formData.get('arrival_time'),
          seat_number: formData.get('seat_number') || null,
          class: formData.get('class') || null,
          booking_reference: formData.get('booking_reference') || null,
          ticket_price: formData.get('ticket_price') ? parseFloat(formData.get('ticket_price')) : null,
          currency: 'USD',
          notes: formData.get('notes') || null,
          photos: [], // TODO: Implement photo upload
          trip_purpose: formData.get('trip_purpose') || null,
          is_favorite: formData.get('is_favorite') === 'on',
          flight_status: formData.get('flight_status') || 'completed',
          trip_id: formData.get('trip_id') ? parseInt(formData.get('trip_id')) : null,
        };
        
        // Send to API
        const response = await fetch('/api/flights', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
          },
          body: JSON.stringify(flightData),
        });
        
        const result = await response.json();
        
        if (response.ok) {
          // Redirect to flights list
          window.location.href = '/admin/flights';
        } else {
          // Handle API errors
          const errorMessage = result.error || result.message || 'Failed to save flight';
          throw new Error(errorMessage);
        }
      } catch (error) {
        console.error('Form submission error:', error);
        alert(error.message || 'Failed to save flight. Please check your input and try again.');
        
        // Re-enable submit button
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });
  });
</script>

<style>
  /* Loading state for submit button */
  button[disabled] {
    position: relative;
    opacity: 0.7;
    cursor: not-allowed;
  }
  
  /* Enhanced form field styles */
  input:invalid:not(:focus):not(:placeholder-shown),
  select:invalid:not(:focus):not(:placeholder-shown) {
    border-color: #ef4444;
    background-color: #fef2f2;
  }
</style>