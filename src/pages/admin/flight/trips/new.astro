---
import AdminLayout from '@/layouts/AdminLayout.astro';
import Card from '@/components/ui/Card.astro';
import Button from '@/components/ui/Button.astro';
import Input from '@/components/ui/Input.astro';
import { db } from '@/lib/db/queries.js';

// Authentication is handled by middleware

// Get airlines, airports, and blog posts for form dropdowns
let airlines, airports, blogPosts;

try {
  const [airlinesData, airportsData, blogResponse] = await Promise.all([
    db.getAirlines(),
    db.getAirports(),
    fetch(`${Astro.url.origin}/api/blog?status=published&limit=100`)
  ]);
  
  airlines = airlinesData;
  airports = airportsData;
  const blogData = blogResponse.ok ? await blogResponse.json() : { data: [] };
  blogPosts = blogData.data || [];
} catch (error) {
  console.error('Form data fetch error:', error);
  airlines = [];
  airports = [];
  blogPosts = [];
}
---

<AdminLayout title="New Flight Trip">
  <div class="container mx-auto px-4 py-8 max-w-4xl">
    <div class="mb-8">
      <h1 class="text-3xl font-bold mb-2">Create New Trip</h1>
      <p class="text-gray-600">Add a new trip with flight details</p>
    </div>

    <Card>
      <form id="trip-form" class="space-y-6">
        <div>
          <label for="name" class="block text-sm font-medium mb-2">
            Trip Name <span class="text-red-500">*</span>
          </label>
          <Input
            id="name"
            name="name"
            type="text"
            required
            placeholder="e.g., Summer Vacation to Japan"
          />
        </div>

        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="start_date" class="block text-sm font-medium mb-2">
              Start Date <span class="text-red-500">*</span>
            </label>
            <Input
              id="start_date"
              name="start_date"
              type="date"
              required
            />
          </div>
          <div>
            <label for="end_date" class="block text-sm font-medium mb-2">
              End Date <span class="text-red-500">*</span>
            </label>
            <Input
              id="end_date"
              name="end_date"
              type="date"
              required
            />
          </div>
        </div>

        <!-- Flights Section -->
        <div class="border-t pt-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Flight Details</h3>
            <Button type="button" variant="secondary" id="add-flight-btn">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Add Flight
            </Button>
          </div>
          
          <div id="flights-container">
            <!-- Initial flight form will be inserted here by JavaScript -->
          </div>
          
          <!-- Shared data lists for all flights -->
          <datalist id="airlines-list">
            {airlines.map(airline => (
              <option value={airline.name} data-code={airline.iata_code}>{airline.name}</option>
            ))}
          </datalist>
          
          <datalist id="airports-list">
            {airports.map(airport => (
              <option value={`${airport.iata_code} - ${airport.name}, ${airport.city}`} data-id={airport.id}>
                {airport.iata_code} - {airport.name}, {airport.city}, {airport.country}
              </option>
            ))}
          </datalist>
        </div>

        <div>
          <label for="blog_post_id" class="block text-sm font-medium mb-2">
            Linked Blog Post (Optional)
          </label>
          <div class="relative">
            <input
              type="text"
              id="blog-search"
              placeholder="Search blog posts..."
              class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              autocomplete="off"
            />
            <select
              id="blog_post_id"
              name="blog_post_id"
              class="hidden"
            >
              <option value="">No blog post</option>
              {blogPosts.map((post: any) => (
                <option value={post.id} data-title={post.title}>
                  {post.title}
                </option>
              ))}
            </select>
            <div id="blog-dropdown" class="absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg hidden max-h-60 overflow-y-auto">
              <div class="p-2">
                <div class="blog-option cursor-pointer p-2 hover:bg-gray-100 rounded" data-value="">
                  No blog post
                </div>
                {blogPosts.map((post: any) => (
                  <div 
                    class="blog-option cursor-pointer p-2 hover:bg-gray-100 rounded" 
                    data-value={post.id}
                    data-title={post.title}
                  >
                    <div class="font-medium">{post.title}</div>
                    {post.excerpt && (
                      <div class="text-sm text-gray-600 truncate">{post.excerpt}</div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div class="flex gap-4 pt-4">
          <Button type="submit">Create Trip</Button>
          <a href="/admin/flight/trips">
            <Button type="button" variant="secondary">Cancel</Button>
          </a>
        </div>
      </form>
    </Card>
  </div>

  <script define:vars={{ airports }}>
    // Make airports data globally available for form processing
    window.airportsData = airports;
  </script>

  <script>
    // Global flight counter for unique IDs
    let flightCounter = 0;
    const flights = [];

    // Enhanced notification system
    function showNotification(title, type = 'info', message = '') {
      // Remove existing notifications
      const existingNotifications = document.querySelectorAll('.flight-notification');
      existingNotifications.forEach(n => n.remove());

      // Create notification element
      const notification = document.createElement('div');
      notification.className = `flight-notification fixed top-4 right-4 max-w-sm bg-white border-l-4 rounded-lg shadow-lg p-4 z-50 transition-all duration-300 transform translate-x-full`;
      
      // Set color based on type
      const colors = {
        success: 'border-green-500 bg-green-50',
        error: 'border-red-500 bg-red-50',
        warning: 'border-yellow-500 bg-yellow-50',
        info: 'border-blue-500 bg-blue-50'
      };
      
      notification.className += ' ' + (colors[type] || colors.info);
      
      notification.innerHTML = `
        <div class="flex items-start">
          <div class="flex-1">
            <h4 class="font-semibold text-gray-900 mb-1">${title}</h4>
            ${message ? `<p class="text-sm text-gray-700 whitespace-pre-line">${message}</p>` : ''}
          </div>
          <button class="ml-3 text-gray-400 hover:text-gray-600 focus:outline-none" onclick="this.parentElement.parentElement.remove()">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);
      
      // Auto remove after 8 seconds for success/info, 12 seconds for warnings/errors
      const autoRemoveTime = (type === 'success' || type === 'info') ? 8000 : 12000;
      setTimeout(() => {
        if (notification.parentElement) {
          notification.classList.add('translate-x-full');
          setTimeout(() => notification.remove(), 300);
        }
      }, autoRemoveTime);
    }
    
    // Create flight form HTML template
    function createFlightFormHTML(flightId) {
      return `
        <div class="flight-form border border-gray-200 rounded-lg p-6 mb-6 bg-gray-50" data-flight-id="${flightId}">
          <div class="flex justify-between items-center mb-4">
            <h4 class="text-md font-semibold text-gray-800">Flight ${flightId + 1}</h4>
            <button type="button" class="remove-flight-btn text-red-600 hover:text-red-800 p-1" ${flightId === 0 ? 'disabled' : ''}>
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          </div>
          
          <!-- Flight Number and Fetch Button -->
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2">
              Flight Number <span class="text-red-500">*</span>
            </label>
            <div class="flex gap-2">
              <input
                type="text"
                class="flight-number flex-1 px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="e.g., AA1, UA1, DL1, EK1"
                required
              />
              <button type="button" class="fetch-flight-btn px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">
                <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                Fetch Data
              </button>
            </div>
            <p class="text-sm text-gray-500 mt-1">
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Fetches real-time flight data. Try: AA1, UA1, DL1, AF1, EK1, QF1
            </p>
          </div>

          <!-- Airline -->
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2">Airline <span class="text-red-500">*</span></label>
            <input
              type="text"
              class="airline-name w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="e.g., American Airlines, United"
              list="airlines-list"
              required
            />
            <input type="hidden" class="airline-code">
          </div>

          <!-- Origin and Destination -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium mb-2">Departure Airport <span class="text-red-500">*</span></label>
              <input
                type="text"
                class="departure-airport w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Search airport name or code..."
                list="airports-list"
                required
              />
              <input type="hidden" class="departure-airport-id" name="flights[${flightId}][departure_airport_id]" required>
            </div>
            
            <div>
              <label class="block text-sm font-medium mb-2">Arrival Airport <span class="text-red-500">*</span></label>
              <input
                type="text"
                class="arrival-airport w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Search airport name or code..."
                list="airports-list"
                required
              />
              <input type="hidden" class="arrival-airport-id" name="flights[${flightId}][arrival_airport_id]" required>
            </div>
          </div>

          <!-- Departure and Arrival Times -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium mb-2">Departure Time <span class="text-red-500">*</span></label>
              <input
                type="datetime-local"
                class="departure-time w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium mb-2">Arrival Time <span class="text-red-500">*</span></label>
              <input
                type="datetime-local"
                class="arrival-time w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
          </div>

          <!-- Aircraft and Seat -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium mb-2">Aircraft Type (Optional)</label>
              <input
                type="text"
                class="aircraft-type w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="e.g., Boeing 737, Airbus A320"
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium mb-2">Seat Number (Optional)</label>
              <input
                type="text"
                class="seat-number w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="e.g., 12A, 27F"
              />
            </div>
          </div>
        </div>
      `;
    }

    // Add event listeners to a flight form
    function addFlightEventListeners(flightForm) {
      const flightId = parseInt(flightForm.dataset.flightId);
      
      // Remove flight button
      const removeBtn = flightForm.querySelector('.remove-flight-btn');
      if (removeBtn && !removeBtn.disabled) {
        removeBtn.addEventListener('click', () => removeFlight(flightId));
      }
      
      // Fetch flight data button
      const fetchBtn = flightForm.querySelector('.fetch-flight-btn');
      fetchBtn.addEventListener('click', () => fetchFlightData(flightId));
      
      // Airport input handling
      const departureInput = flightForm.querySelector('.departure-airport');
      const arrivalInput = flightForm.querySelector('.arrival-airport');
      const departureIdInput = flightForm.querySelector('.departure-airport-id');
      const arrivalIdInput = flightForm.querySelector('.arrival-airport-id');
      
      departureInput.addEventListener('change', () => updateAirportId(departureInput, departureIdInput));
      arrivalInput.addEventListener('change', () => updateAirportId(arrivalInput, arrivalIdInput));
      
      // Airline input handling
      const airlineInput = flightForm.querySelector('.airline-name');
      const airlineCodeInput = flightForm.querySelector('.airline-code');
      
      airlineInput.addEventListener('change', function() {
        const datalist = document.getElementById('airlines-list');
        const option = Array.from(datalist.options).find(opt => opt.value === this.value);
        if (option) {
          airlineCodeInput.value = option.dataset.code;
        }
      });
    }

    // Update hidden airport ID when airport is selected
    function updateAirportId(input, idInput) {
      const value = input.value;
      const datalist = document.getElementById('airports-list');
      const option = Array.from(datalist.options).find(opt => opt.value === value);
      
      if (option) {
        idInput.value = option.dataset.id;
      } else {
        // Try to find by IATA code only
        const iataMatch = value.match(/^([A-Z]{3})/);
        if (iataMatch) {
          const airport = window.airportsData.find(a => a.iata_code === iataMatch[1]);
          if (airport) {
            idInput.value = airport.id;
          }
        }
      }
    }

    // Add a new flight form
    function addFlight() {
      const container = document.getElementById('flights-container');
      const flightId = flightCounter++;
      
      const flightDiv = document.createElement('div');
      flightDiv.innerHTML = createFlightFormHTML(flightId);
      const flightForm = flightDiv.firstElementChild;
      
      container.appendChild(flightForm);
      addFlightEventListeners(flightForm);
      
      flights.push(flightId);
      updateFlightLabels();
      
      // Focus on the flight number input
      flightForm.querySelector('.flight-number').focus();
    }

    // Remove a flight form
    function removeFlight(flightId) {
      if (flights.length <= 1) {
        showNotification('Cannot remove flight', 'warning', 'At least one flight is required for a trip.');
        return;
      }
      
      const flightForm = document.querySelector(`[data-flight-id="${flightId}"]`);
      if (flightForm) {
        flightForm.remove();
        const index = flights.indexOf(flightId);
        if (index > -1) {
          flights.splice(index, 1);
        }
        updateFlightLabels();
      }
    }

    // Update flight labels to show correct numbering
    function updateFlightLabels() {
      const flightForms = document.querySelectorAll('.flight-form');
      flightForms.forEach((form, index) => {
        const header = form.querySelector('h4');
        header.textContent = `Flight ${index + 1}`;
        
        const removeBtn = form.querySelector('.remove-flight-btn');
        if (removeBtn) {
          removeBtn.disabled = flightForms.length <= 1;
          if (removeBtn.disabled) {
            removeBtn.classList.add('opacity-50', 'cursor-not-allowed');
          } else {
            removeBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          }
        }
      });
    }

    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, initializing dynamic flight trip form...');
      
      // Add initial flight form
      addFlight();
      
      // Add flight button handler
      const addFlightBtn = document.getElementById('add-flight-btn');
      addFlightBtn.addEventListener('click', addFlight);
      
      // Fetch flight data for a specific flight
      window.fetchFlightData = async function(flightId) {
        const flightForm = document.querySelector(`[data-flight-id="${flightId}"]`);
        if (!flightForm) return;
        
        const flightNumberInput = flightForm.querySelector('.flight-number');
        const fetchBtn = flightForm.querySelector('.fetch-flight-btn');
        
        const rawFlightNumber = flightNumberInput.value;
        const flightNumber = rawFlightNumber.trim().toUpperCase();
        
        if (!flightNumber) {
          showNotification('📝 Flight Number Required', 'warning', 'Please enter a flight number first (e.g., AA1, UA1, DL1)');
          return;
        }
        
        // Basic flight number format validation
        const formatRegex = /^[A-Z]{2,3}\d{1,5}$/i;
        if (!formatRegex.test(flightNumber)) {
          showNotification('✈️ Invalid Flight Number Format', 'warning', 'Flight number should be in format like: AA1, UA456, or DL1234');
          return;
        }
        
        // Update the input field with the formatted flight number
        flightNumberInput.value = flightNumber;
        
        // Show loading state
        fetchBtn.disabled = true;
        const originalContent = fetchBtn.innerHTML;
        fetchBtn.innerHTML = `
          <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-current inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Fetching...
        `;
        
        try {
          const requestPayload = { flightIata: flightNumber };
          const response = await fetch('/api/flights/fetch', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestPayload),
          });
          
          const result = await response.json();
          
          if (result.success && result.data) {
            const data = result.data;
            
            // Populate form fields with fetched data
            flightForm.querySelector('.airline-name').value = data.airline_name || '';
            flightForm.querySelector('.airline-code').value = data.airline_code || '';
            flightForm.querySelector('.aircraft-type').value = data.aircraft_type || '';
            
            // Set airports using data from Aviation Stack API
            if (data.departure_iata && data.departure_airport_name) {
              // Set the airport input with name from API
              flightForm.querySelector('.departure-airport').value = `${data.departure_iata} - ${data.departure_airport_name}`;
              
              // Lookup or create the airport in our database
              try {
                const depResponse = await fetch('/api/airports/lookup', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    iata_code: data.departure_iata,
                    name: data.departure_airport_name,
                    city: data.departure_airport_name.split(',')[0] || 'Unknown',
                    country: 'Unknown'
                  })
                });
                
                if (depResponse.ok) {
                  const depResult = await depResponse.json();
                  flightForm.querySelector('.departure-airport-id').value = depResult.data.id;
                  
                  // Update our local airports data if it was created
                  if (depResult.created) {
                    window.airportsData.push(depResult.data);
                  }
                } else {
                  console.error('Failed to lookup/create departure airport');
                  showNotification('⚠️ Airport Lookup Failed', 'warning', `Could not find or create ${data.departure_iata} in database`);
                }
              } catch (error) {
                console.error('Error looking up departure airport:', error);
              }
            }
            
            if (data.arrival_iata && data.arrival_airport_name) {
              // Set the airport input with name from API
              flightForm.querySelector('.arrival-airport').value = `${data.arrival_iata} - ${data.arrival_airport_name}`;
              
              // Lookup or create the airport in our database
              try {
                const arrResponse = await fetch('/api/airports/lookup', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    iata_code: data.arrival_iata,
                    name: data.arrival_airport_name,
                    city: data.arrival_airport_name.split(',')[0] || 'Unknown',
                    country: 'Unknown'
                  })
                });
                
                if (arrResponse.ok) {
                  const arrResult = await arrResponse.json();
                  flightForm.querySelector('.arrival-airport-id').value = arrResult.data.id;
                  
                  // Update our local airports data if it was created
                  if (arrResult.created) {
                    window.airportsData.push(arrResult.data);
                  }
                } else {
                  console.error('Failed to lookup/create arrival airport');
                  showNotification('⚠️ Airport Lookup Failed', 'warning', `Could not find or create ${data.arrival_iata} in database`);
                }
              } catch (error) {
                console.error('Error looking up arrival airport:', error);
              }
            }
            
            // Set times
            if (data.departure_time) {
              const depTime = new Date(data.departure_time);
              flightForm.querySelector('.departure-time').value = depTime.toISOString().slice(0, 16);
            }
            
            if (data.arrival_time) {
              const arrTime = new Date(data.arrival_time);
              flightForm.querySelector('.arrival-time').value = arrTime.toISOString().slice(0, 16);
            }
            
            showNotification('✅ Flight data fetched successfully!', 'success', `Flight ${flightNumber} data loaded. Note: Shows most recent schedule data.`);
          } else {
            const errorMessage = result.error || 'Failed to fetch flight data';
            if (errorMessage.includes('not found')) {
              showNotification('🔍 Flight not found', 'info', `Flight ${flightNumber} was not found. You can manually enter the flight details.`);
            } else {
              showNotification('⚠️ Unable to fetch flight data', 'warning', 'You can manually enter the flight details below.');
            }
          }
        } catch (error) {
          console.error('Fetch error:', error);
          showNotification('🌐 Network Error', 'error', 'Failed to connect to the flight data service.');
        } finally {
          // Reset button state
          fetchBtn.disabled = false;
          fetchBtn.innerHTML = originalContent;
        }
      };
    });

    // Blog post search functionality  
    document.addEventListener('DOMContentLoaded', function() {
      const blogSearch = document.getElementById('blog-search');
      const blogDropdown = document.getElementById('blog-dropdown');
      const blogSelect = document.getElementById('blog_post_id');
      const blogOptions = blogDropdown?.querySelectorAll('.blog-option');

      if (blogSearch && blogDropdown && blogSelect && blogOptions) {
        blogSearch.addEventListener('focus', () => {
          blogDropdown.classList.remove('hidden');
        });

        blogSearch.addEventListener('input', (e) => {
          const searchTerm = e.target.value.toLowerCase();
          blogOptions.forEach(option => {
            const title = option.getAttribute('data-title')?.toLowerCase() || '';
            const text = option.textContent?.toLowerCase() || '';
            if (title.includes(searchTerm) || text.includes(searchTerm)) {
              option.style.display = 'block';
            } else {
              option.style.display = 'none';
            }
          });
        });

        blogOptions.forEach(option => {
          option.addEventListener('click', () => {
            const value = option.getAttribute('data-value') || '';
            const title = option.getAttribute('data-title') || 'No blog post';
            blogSelect.value = value;
            blogSearch.value = title;
            blogDropdown.classList.add('hidden');
          });
        });

        document.addEventListener('click', (e) => {
          if (!blogSearch.contains(e.target) && !blogDropdown.contains(e.target)) {
            blogDropdown.classList.add('hidden');
          }
        });
      }
    });

    // Form submission with multiple flights support
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('trip-form');
      if (!form) return;
      
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        
        try {
          // Collect all flight data
          const flightForms = document.querySelectorAll('.flight-form');
          if (flightForms.length === 0) {
            throw new Error('At least one flight is required');
          }
          
          const flightData = [];
          let hasErrors = false;
          const errors = [];
          
          // Validate and collect data from each flight form
          for (let i = 0; i < flightForms.length; i++) {
            const flightForm = flightForms[i];
            const flightNumber = i + 1;
            
            // Get all input values
            const depAirportIdValue = flightForm.querySelector('.departure-airport-id').value;
            const arrAirportIdValue = flightForm.querySelector('.arrival-airport-id').value;
            
            console.log(`Flight ${flightNumber} airport IDs:`, {
              departure_id_raw: depAirportIdValue,
              arrival_id_raw: arrAirportIdValue,
              departure_id_parsed: parseInt(depAirportIdValue),
              arrival_id_parsed: parseInt(arrAirportIdValue)
            });
            
            const flight = {
              flight_number: flightForm.querySelector('.flight-number').value.trim(),
              airline_code: flightForm.querySelector('.airline-code').value || null,
              airline_name: flightForm.querySelector('.airline-name').value.trim(),
              aircraft_type: flightForm.querySelector('.aircraft-type').value.trim() || null,
              departure_airport_id: parseInt(depAirportIdValue),
              arrival_airport_id: parseInt(arrAirportIdValue),
              departure_time: flightForm.querySelector('.departure-time').value,
              arrival_time: flightForm.querySelector('.arrival-time').value,
              seat_number: flightForm.querySelector('.seat-number').value.trim() || null,
            };
            
            // Validate required fields
            if (!flight.flight_number) {
              errors.push(`Flight ${flightNumber}: Flight number is required`);
              hasErrors = true;
            }
            
            if (!flight.airline_name) {
              errors.push(`Flight ${flightNumber}: Airline name is required`);
              hasErrors = true;
            }
            
            if (!flight.departure_airport_id || isNaN(flight.departure_airport_id)) {
              errors.push(`Flight ${flightNumber}: Please select a valid departure airport`);
              hasErrors = true;
            }
            
            if (!flight.arrival_airport_id || isNaN(flight.arrival_airport_id)) {
              errors.push(`Flight ${flightNumber}: Please select a valid arrival airport`);
              hasErrors = true;
            }
            
            if (!flight.departure_time) {
              errors.push(`Flight ${flightNumber}: Departure time is required`);
              hasErrors = true;
            }
            
            if (!flight.arrival_time) {
              errors.push(`Flight ${flightNumber}: Arrival time is required`);
              hasErrors = true;
            }
            
            // Validate time logic
            if (flight.departure_time && flight.arrival_time) {
              const depTime = new Date(flight.departure_time);
              const arrTime = new Date(flight.arrival_time);
              if (depTime >= arrTime) {
                errors.push(`Flight ${flightNumber}: Departure time must be before arrival time`);
                hasErrors = true;
              }
            }
            
            if (!hasErrors || flightData.length === 0) {
              flightData.push(flight);
            }
          }
          
          if (hasErrors) {
            throw new Error(errors.join('\\n'));
          }
          
          // Disable submit button and show loading state
          submitBtn.disabled = true;
          submitBtn.textContent = 'Creating Trip...';
          
          const formData = new FormData(form);
          
          // Build trip data object with multiple flights
          const tripData = {
            name: formData.get('name'),
            start_date: formData.get('start_date'),
            end_date: formData.get('end_date'),
            blog_post_id: formData.get('blog_post_id') || null,
            flights: flightData
          };

          console.log('Submitting trip data:', tripData);

          const response = await fetch('/api/flights/trips', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify(tripData)
          });

          if (response.ok) {
            const result = await response.json();
            showNotification('✅ Trip created successfully!', 'success', `Created trip with ${result.data.flights_created} flight(s)`);
            setTimeout(() => {
              window.location.href = '/admin/flight/trips';
            }, 1500);
          } else {
            const error = await response.json();
            if (response.status === 401) {
              showNotification('🔐 Session expired', 'error', 'Please log in again.');
              setTimeout(() => {
                window.location.href = '/admin/login';
              }, 2000);
            } else {
              throw new Error(error.error || error.message || 'Unknown error');
            }
          }
        } catch (error) {
          console.error('Error creating trip:', error);
          showNotification('❌ Error creating trip', 'error', error.message || 'Please check your input and try again.');
          
          // Re-enable submit button
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      });
    });
  </script>

  <style>
    /* Loading state for buttons */
    button[disabled] {
      position: relative;
      opacity: 0.7;
      cursor: not-allowed;
    }
    
    /* Enhanced form field styles */
    input:invalid:not(:focus):not(:placeholder-shown),
    select:invalid:not(:focus):not(:placeholder-shown) {
      border-color: #ef4444;
      background-color: #fef2f2;
    }
    
    /* Blog dropdown scrollbar */
    #blog-dropdown::-webkit-scrollbar {
      width: 8px;
    }
    
    #blog-dropdown::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 4px;
    }
    
    #blog-dropdown::-webkit-scrollbar-thumb {
      background: #888;
      border-radius: 4px;
    }
    
    #blog-dropdown::-webkit-scrollbar-thumb:hover {
      background: #555;
    }
  </style>
</AdminLayout>