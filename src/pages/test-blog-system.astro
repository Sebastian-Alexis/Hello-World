---
import { db } from '@/lib/db/queries';
import { ContentProcessor } from '@/lib/content/processor';

const testSlug = 'testpublish';
const results = [];

// Test 1: Direct database query
try {
  const post = await db.getBlogPostBySlug(testSlug);
  results.push({
    test: 'getBlogPostBySlug',
    success: !!post,
    data: post ? {
      id: post.id,
      title: post.title,
      slug: post.slug,
      status: post.status,
      published_at: post.published_at,
      content_length: post.content?.length || 0
    } : null
  });
} catch (error) {
  results.push({
    test: 'getBlogPostBySlug',
    success: false,
    error: error.message,
    stack: error.stack
  });
}

// Test 2: Content processing
try {
  const post = await db.getBlogPostBySlug(testSlug);
  if (post && post.content) {
    const processed = ContentProcessor.processContent(post.content, post.title);
    results.push({
      test: 'ContentProcessor',
      success: true,
      data: {
        html_length: processed.html.length,
        word_count: processed.wordCount,
        reading_time: processed.readingTime
      }
    });
  } else {
    results.push({
      test: 'ContentProcessor',
      success: false,
      error: 'No post or content to process'
    });
  }
} catch (error) {
  results.push({
    test: 'ContentProcessor',
    success: false,
    error: error.message,
    stack: error.stack
  });
}

// Test 3: Full blog page simulation
let simulationError = null;
try {
  const slug = testSlug;
  
  if (!slug) {
    throw new Error('No slug provided');
  }
  
  const post = await db.getBlogPostBySlug(slug);
  
  if (!post) {
    throw new Error('Post not found');
  }
  
  const processed = ContentProcessor.processContent(post.content, post.title);
  const processedContent = processed.html;
  
  const [nextPost, prevPost] = await Promise.all([
    db.getNextBlogPost(post.published_at, post.id),
    db.getPreviousBlogPost(post.published_at, post.id)
  ]);
  
  results.push({
    test: 'Full blog page simulation',
    success: true,
    data: {
      post_found: true,
      content_processed: true,
      html_length: processedContent.length,
      has_next: !!nextPost,
      has_prev: !!prevPost
    }
  });
} catch (error) {
  simulationError = error;
  results.push({
    test: 'Full blog page simulation',
    success: false,
    error: error.message,
    stack: error.stack,
    note: 'This error would cause redirect to /blog'
  });
}

// Test 4: Check all published posts
try {
  const allPosts = await db.getBlogPosts({ limit: 10, status: 'published' });
  results.push({
    test: 'Get all published posts',
    success: true,
    data: {
      total: allPosts.total,
      posts: allPosts.posts.map(p => ({
        id: p.id,
        title: p.title,
        slug: p.slug,
        status: p.status
      }))
    }
  });
} catch (error) {
  results.push({
    test: 'Get all published posts',
    success: false,
    error: error.message
  });
}
---

<!DOCTYPE html>
<html>
<head>
  <title>Blog System Test</title>
  <style>
    body { font-family: monospace; padding: 20px; max-width: 1200px; margin: 0 auto; }
    .success { color: green; background: #efe; padding: 10px; margin: 10px 0; border-radius: 5px; }
    .error { color: red; background: #fee; padding: 10px; margin: 10px 0; border-radius: 5px; }
    .data { background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 3px; }
    pre { white-space: pre-wrap; word-wrap: break-word; }
    h1 { color: #333; }
    h2 { color: #666; margin-top: 30px; }
    .summary { background: #333; color: white; padding: 15px; border-radius: 5px; margin: 20px 0; }
  </style>
</head>
<body>
  <h1>üß™ Blog System Test Results</h1>
  
  <div class="summary">
    <h2 style="color: white; margin-top: 0;">Summary</h2>
    <p>Testing slug: <strong>{testSlug}</strong></p>
    <p>Tests run: <strong>{results.length}</strong></p>
    <p>Passed: <strong>{results.filter(r => r.success).length}</strong></p>
    <p>Failed: <strong>{results.filter(r => !r.success).length}</strong></p>
  </div>
  
  <h2>Test Results:</h2>
  
  {results.map((result, i) => (
    <div class={result.success ? 'success' : 'error'}>
      <h3>{i + 1}. {result.test}</h3>
      <p>Status: {result.success ? '‚úÖ PASS' : '‚ùå FAIL'}</p>
      
      {result.error && (
        <>
          <p><strong>Error:</strong> {result.error}</p>
          {result.note && <p><strong>Note:</strong> {result.note}</p>}
          {result.stack && (
            <details>
              <summary>Stack trace</summary>
              <pre>{result.stack}</pre>
            </details>
          )}
        </>
      )}
      
      {result.data && (
        <div class="data">
          <strong>Data:</strong>
          <pre>{JSON.stringify(result.data, null, 2)}</pre>
        </div>
      )}
    </div>
  ))}
  
  <h2>Diagnosis:</h2>
  <div class={simulationError ? 'error' : 'success'}>
    {simulationError ? (
      <>
        <p><strong>‚ùå Blog page would redirect!</strong></p>
        <p>The error "{simulationError.message}" in the blog page logic would cause a redirect to /blog.</p>
        <p>This is happening in the try-catch block of blog/[slug].astro</p>
      </>
    ) : (
      <p><strong>‚úÖ Blog page should work correctly!</strong></p>
    )}
  </div>
  
  <h2>Quick Links:</h2>
  <ul>
    <li><a href="/blog/testpublish">Try visiting the blog post</a></li>
    <li><a href="/blog/debug-testpublish">Debug page</a></li>
    <li><a href="/blog/debug-full-testpublish">Full debug page</a></li>
    <li><a href="/api/debug/check-slugs">Check all slugs</a></li>
    <li><a href="/blog">Back to blog</a></li>
  </ul>
</body>
</html>