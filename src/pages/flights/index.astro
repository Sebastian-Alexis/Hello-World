---
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { Flight, Airport } from '../../components/flight-map/types';
import { DatabaseQueries } from '../../lib/db/queries';
import FlightMap from '../../components/flight-map/FlightMap.svelte';
import FlightDebug from '../../components/FlightDebug.astro';

//fetch flight statistics
let flightStats = {
  totalFlights: 0,
  totalDistance: 0,
  completedFlights: 0,
  upcomingFlights: 0,
  uniqueAirlines: 0,
  visitedAirports: 0,
  totalAirports: 0,
  countries: 0,
  totalFlightTime: 0,
  uniqueAirports: 0,
  uniqueCountries: 0,
  favoriteAirline: '',
  longestFlight: null,
  mostVisitedAirport: ''
};

//fetch all flights for map visualization
let flights: Flight[] = [];
let airports: Airport[] = [];
let recentFlights: Flight[] = [];
let hasError = false;
let errorMessage = '';

try {
  const db = new DatabaseQueries();

  // First, let's try to get the flight statistics to verify database connectivity
  try {
    const stats = await db.getComprehensiveFlightStatistics();
    console.log('Comprehensive flight statistics:', stats);
    
    // Map the returned statistics to what the frontend expects
    flightStats = {
      totalFlights: stats.totalFlights,
      totalDistance: stats.totalDistance,
      completedFlights: stats.completedFlights,
      upcomingFlights: stats.upcomingFlights,
      uniqueAirlines: stats.uniqueAirlines,
      visitedAirports: stats.uniqueAirports,
      totalAirports: stats.uniqueAirports,
      countries: stats.uniqueCountries,
      totalFlightTime: stats.totalFlightTime,
      uniqueAirports: stats.uniqueAirports,
      uniqueCountries: stats.uniqueCountries,
      favoriteAirline: stats.favoriteAirline,
      longestFlight: stats.longestFlight,
      mostVisitedAirport: stats.mostVisitedAirport
    };
  } catch (statsError) {
    console.error('Error fetching flight statistics:', statsError);
  }

  //fetch flights with high limit for map visualization
  try {
    console.log('Attempting to fetch flights...');
    const flightsResponse = await db.getAllFlights(1, 1000);
    console.log('Flight response:', JSON.stringify(flightsResponse, null, 2));
    flights = flightsResponse.data;
    console.log(`Fetched ${flights.length} flights from database`);
    
    // Log first flight if exists
    if (flights.length > 0) {
      console.log('First flight:', JSON.stringify(flights[0], null, 2));
    }
  } catch (flightError) {
    console.error('Error fetching flights:', flightError);
    console.error('Error details:', flightError.message);
    console.error('Stack trace:', flightError.stack);
    
    // Try using the API endpoint instead
    try {
      console.log('Trying API fallback...');
      const response = await fetch(`${Astro.url.origin}/api/flights?limit=1000`);
      console.log('API response status:', response.status);
      
      if (response.ok) {
        const apiData = await response.json();
        console.log('API data:', JSON.stringify(apiData, null, 2));
        
        if (apiData.success && apiData.data?.data) {
          flights = apiData.data.data;
          console.log(`Fetched ${flights.length} flights from API`);
        }
      }
    } catch (apiError) {
      console.error('Error fetching from API:', apiError);
    }
  }

  //fetch airports
  try {
    airports = await db.searchAirports(undefined, 500);
    console.log(`Fetched ${airports.length} airports`);
  } catch (airportError) {
    console.error('Error fetching airports:', airportError);
  }

  //get recent flights (last 10)
  if (flights.length > 0) {
    recentFlights = flights
      .sort((a, b) => new Date(b.departure_time).getTime() - new Date(a.departure_time).getTime())
      .slice(0, 10);
  }

  // Update flight stats with actual count if mismatch
  if (flightStats.totalFlights === 0 && flights.length > 0) {
    flightStats.totalFlights = flights.length;
  }
  
  // Calculate completed and upcoming flights from actual data
  if (flights.length > 0) {
    const now = new Date();
    flightStats.completedFlights = flights.filter(f => 
      f.flight_status === 'completed' || new Date(f.arrival_time) < now
    ).length;
    flightStats.upcomingFlights = flights.filter(f => 
      f.flight_status === 'booked' || new Date(f.departure_time) > now
    ).length;
    
    // If the stats from the database don't match, use the actual count
    if (flightStats.totalFlights === 0) {
      flightStats.totalFlights = flights.length;
    }
  }

} catch (error) {
  hasError = true;
  errorMessage = 'Failed to load flight data. Please try again later.';
  console.error('Error fetching flight data:', error);
}

//calculate current year for dynamic content
const currentYear = new Date().getFullYear();
---

<BaseLayout 
	title="Flight Map - Interactive Travel Visualization"
	description="Explore my flight routes and airport visits with an interactive map. View flight statistics, filter by airlines and dates, and discover travel patterns across the globe."
	keywords="flight tracking, travel map, interactive visualization, flight routes, airports, travel statistics, mapbox, flight data"
	image="/images/flight-map-preview.jpg"
	structuredData={{
		"@context": "https://schema.org",
		"@type": "WebPage",
		"name": "Flight Map - Interactive Travel Visualization",
		"description": "Interactive map showing flight routes and airport visits with detailed statistics and filtering options.",
		"url": `${Astro.site}flights/`,
		"mainEntity": {
			"@type": "TravelAction",
			"name": "Flight Tracking",
			"description": `Tracking ${flightStats.totalFlights} flights across ${flightStats.visitedAirports} airports in ${flightStats.countries} countries.`
		}
	}}
>
	<!-- Debug component -->
	<FlightDebug flightStats={flightStats} flights={flights} error={errorMessage} />
	<!-- Hero Section with Statistics -->
	<section class="bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-blue-900 dark:to-indigo-900 py-16">
		<div class="max-w-7xl mx-auto px-4">
			<div class="text-center mb-12">
				<h1 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-6">
					Flight Map
				</h1>
				<p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto mb-8">
					Explore my travel journey with an interactive map showing flight routes, airports, and detailed statistics.
					Discover patterns, filter by preferences, and track adventures across the globe.
				</p>
				<div class="flex flex-wrap justify-center gap-4">
					<a href="/flights/list" class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200">
						<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
						</svg>
						View All Flights
					</a>
					<a href="#recent-flights" class="inline-flex items-center px-6 py-3 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 font-medium rounded-lg border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
						<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						Recent Flights
					</a>
				</div>
			</div>

			<!-- Statistics Grid -->
			<div class="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
				<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 text-center border border-white/20 dark:border-gray-700/50">
					<div class="text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2">
						{flightStats.totalFlights.toLocaleString()}
					</div>
					<div class="text-sm font-medium text-gray-600 dark:text-gray-300">
						Total Flights
					</div>
				</div>

				<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 text-center border border-white/20 dark:border-gray-700/50">
					<div class="text-3xl font-bold text-green-600 dark:text-green-400 mb-2">
						{flightStats.visitedAirports}
					</div>
					<div class="text-sm font-medium text-gray-600 dark:text-gray-300">
						Airports Visited
					</div>
				</div>

				<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 text-center border border-white/20 dark:border-gray-700/50">
					<div class="text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2">
						{(flightStats.totalDistance / 1000).toFixed(0)}K
					</div>
					<div class="text-sm font-medium text-gray-600 dark:text-gray-300">
						KM Traveled
					</div>
				</div>

				<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 text-center border border-white/20 dark:border-gray-700/50">
					<div class="text-3xl font-bold text-orange-600 dark:text-orange-400 mb-2">
						{flightStats.countries}
					</div>
					<div class="text-sm font-medium text-gray-600 dark:text-gray-300">
						Countries
					</div>
				</div>
			</div>
		</div>
	</section>

	<main class="max-w-7xl mx-auto px-4 py-12">

		<!-- Error State -->
		{hasError ? (
			<div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 mb-8">
				<div class="flex items-center mb-2">
					<svg class="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
						<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
					</svg>
					<h3 class="text-red-800 dark:text-red-200 font-medium">Unable to Load Flight Data</h3>
				</div>
				<p class="text-red-700 dark:text-red-300">{errorMessage}</p>
			</div>
		) : (
			<!-- Interactive Map Section -->
			<section class="mb-12">
				<div class="mb-6">
					<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-3">
						Interactive Flight Map
					</h2>
					<p class="text-gray-600 dark:text-gray-400">
						Explore flight routes with filtering and detailed information. Click flights for more details.
					</p>
				</div>

				<div class="map-wrapper">
					<FlightMap 
						flights={flights}
						airports={airports}
						height="700px"
						showControls={true}
						theme="light"
						onFlightSelect={(flight) => {
							if (flight) {
								window.location.href = `/flights/${flight.id}`;
							}
						}}
						client:load
					/>
				</div>
			</section>
		)}

		<!-- Recent Flights -->
		{!hasError && (
			<section id="recent-flights" class="mb-12">
				<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">
					Recent Flights
				</h2>

				<div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
					{recentFlights.length > 0 ? (
						<div class="divide-y divide-gray-200 dark:divide-gray-700">
							{recentFlights.map((flight, index) => (
								<div key={flight.id} class="p-4">
									<div class="flex items-center gap-3 mb-1">
										<span class="font-semibold text-gray-900 dark:text-white">
											{flight.airline_name || 'Unknown Airline'}
										</span>
										{flight.flight_number && (
											<span class="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs font-medium rounded">
												{flight.flight_number}
											</span>
										)}
										<span class={`px-2 py-1 text-xs font-medium rounded ${flight.flight_status === 'completed' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' : 
											flight.flight_status === 'booked' ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200' :
											flight.flight_status === 'cancelled' ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200' :
											'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200'}`}>
											{flight.flight_status}
										</span>
									</div>
									<p class="text-sm text-gray-600 dark:text-gray-400">
										{flight.departure_airport_name} → {flight.arrival_airport_name}
									</p>
									<p class="text-xs text-gray-500 dark:text-gray-500 mt-1">
										{new Date(flight.departure_time).toLocaleDateString('en-US', { 
											year: 'numeric', 
											month: 'short', 
											day: 'numeric' 
										})}
									</p>
								</div>
							))}
						</div>
					) : (
						<div class="px-4 py-8 text-center text-gray-500 dark:text-gray-400">
							<p>No recent flights to display</p>
						</div>
					)}
				</div>
			</section>
		)}

		<!-- Additional Statistics -->
		{!hasError && (
			<section class="mb-12">
				<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">
					Flight Statistics
				</h2>

				<div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
					<div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
								Completed
							</h3>
							<div class="p-2 bg-green-100 dark:bg-green-900 rounded-lg">
								<svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
								</svg>
							</div>
						</div>
						<p class="text-3xl font-bold text-green-600 dark:text-green-400 mb-1">
							{flightStats.completedFlights}
						</p>
						<p class="text-sm text-gray-600 dark:text-gray-400">
							of {flightStats.totalFlights} total flights
						</p>
					</div>

					<div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
								Upcoming
							</h3>
							<div class="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
								<svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</div>
						</div>
						<p class="text-3xl font-bold text-blue-600 dark:text-blue-400 mb-1">
							{flightStats.upcomingFlights}
						</p>
						<p class="text-sm text-gray-600 dark:text-gray-400">
							booked flights
						</p>
					</div>

					<div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
								Airlines
							</h3>
							<div class="p-2 bg-purple-100 dark:bg-purple-900 rounded-lg">
								<svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
								</svg>
							</div>
						</div>
						<p class="text-3xl font-bold text-purple-600 dark:text-purple-400 mb-1">
							{flightStats.uniqueAirlines}
						</p>
						<p class="text-sm text-gray-600 dark:text-gray-400">
							unique airlines
						</p>
					</div>

					<div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
								This Year
							</h3>
							<div class="p-2 bg-orange-100 dark:bg-orange-900 rounded-lg">
								<svg class="w-5 h-5 text-orange-600 dark:text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
								</svg>
							</div>
						</div>
						<p class="text-3xl font-bold text-orange-600 dark:text-orange-400 mb-1">
							{flights.filter(f => new Date(f.departure_time).getFullYear() === currentYear).length}
						</p>
						<p class="text-sm text-gray-600 dark:text-gray-400">
							flights in {currentYear}
						</p>
					</div>
				</div>
			</section>
		)}

	</main>
</BaseLayout>


<style>
	.map-wrapper {
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
		border: 1px solid rgb(229 231 235 / 0.5);
	}

	@media (prefers-color-scheme: dark) {
		.map-wrapper {
			border-color: rgb(75 85 99 / 0.5);
		}
	}

	/* Enhanced hover effects for interactive elements */
	.flight-card:hover {
		transform: translateY(-2px);
		box-shadow: 0 8px 25px -5px rgb(0 0 0 / 0.1);
	}

	/* Smooth transitions for all interactive elements */
	.transition-smooth {
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}
</style>