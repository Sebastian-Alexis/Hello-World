---
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { Flight } from '../../components/flight-map/types';

//get query parameters for filters and pagination
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const limit = parseInt(url.searchParams.get('limit') || '20');
const airline = url.searchParams.get('airline') || '';
const year = url.searchParams.get('year') || '';
const status = url.searchParams.get('status') || '';
const search = url.searchParams.get('search') || '';
const sortBy = url.searchParams.get('sort') || 'departure_time';
const sortOrder = url.searchParams.get('order') || 'desc';

//fetch flights from API
const siteUrl = Astro.site?.toString() || 'http://localhost:4321';

let flights: Flight[] = [];
let totalFlights = 0;
let hasError = false;
let errorMessage = '';
let uniqueAirlines: string[] = [];
let uniqueYears: number[] = [];

try {
  //build API URL with filters
  const apiUrl = new URL(`${siteUrl}/api/flights`);
  apiUrl.searchParams.set('page', page.toString());
  apiUrl.searchParams.set('limit', limit.toString());
  if (airline) apiUrl.searchParams.set('airline', airline);
  if (year) apiUrl.searchParams.set('year', year);
  if (status) apiUrl.searchParams.set('status', status);
  if (search) apiUrl.searchParams.set('search', search);

  const response = await fetch(apiUrl.toString());
  const data = await response.json();
  
  if (data.success) {
    flights = data.data;
    totalFlights = data.total || flights.length;
  } else {
    hasError = true;
    errorMessage = data.error || 'Failed to load flights';
  }

  //fetch all flights to get unique airlines and years for filters
  const allFlightsResponse = await fetch(`${siteUrl}/api/flights?limit=1000`);
  const allFlightsData = await allFlightsResponse.json();
  
  if (allFlightsData.success) {
    const allFlights = allFlightsData.data;
    uniqueAirlines = [...new Set(allFlights.map((f: Flight) => f.airline_name).filter(Boolean))].sort();
    uniqueYears = [...new Set(allFlights.map((f: Flight) => new Date(f.departure_time).getFullYear()))].sort((a, b) => b - a);
  }

} catch (error) {
  hasError = true;
  errorMessage = 'Failed to load flight data. Please try again later.';
  console.error('Error fetching flights:', error);
}

//pagination calculations
const totalPages = Math.ceil(totalFlights / limit);
const hasNextPage = page < totalPages;
const hasPrevPage = page > 1;

//helper functions
function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}

function formatTime(dateString: string): string {
  return new Date(dateString).toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  });
}

function getStatusColor(status: string): string {
  switch (status) {
    case 'completed':
      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
    case 'booked':
      return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
    case 'cancelled':
      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
    case 'delayed':
      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
  }
}

function buildFilterUrl(params: Record<string, string>): string {
  const newUrl = new URL('/flights/list', Astro.site);
  Object.entries(params).forEach(([key, value]) => {
    if (value) newUrl.searchParams.set(key, value);
  });
  return newUrl.pathname + newUrl.search;
}

function buildSortUrl(column: string): string {
  const newOrder = sortBy === column && sortOrder === 'asc' ? 'desc' : 'asc';
  return buildFilterUrl({
    page: '1',
    limit: limit.toString(),
    airline,
    year,
    status,
    search,
    sort: column,
    order: newOrder
  });
}

//generate page title and description
const pageTitle = `Flight List ${search ? `- Search: ${search}` : ''}${airline ? ` - ${airline}` : ''}${year ? ` - ${year}` : ''}`;
const pageDescription = `Browse all ${totalFlights} flights with advanced filtering and search. View flight details, airlines, dates, and statuses in a comprehensive table format.`;
---

<BaseLayout 
  title={pageTitle}
  description={pageDescription}
  keywords="flight list, flight archive, flight search, flight filter, aviation data, travel history"
  image="/images/flight-list-preview.jpg"
  structuredData={{
    "@context": "https://schema.org",
    "@type": "WebPage",
    "name": pageTitle,
    "description": pageDescription,
    "url": `${Astro.site}flights/list`,
    "mainEntity": {
      "@type": "ItemList",
      "name": "Flight List",
      "numberOfItems": totalFlights,
      "description": `List of ${totalFlights} flights with filtering and search capabilities.`
    }
  }}
>
  <main class="max-w-7xl mx-auto px-4 py-8">
    <!-- Breadcrumb Navigation -->
    <nav class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-8" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2">
        <li>
          <a href="/" class="hover:text-gray-900 dark:hover:text-gray-200 transition-colors duration-200">
            Home
          </a>
        </li>
        <li>
          <svg class="w-4 h-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
          </svg>
        </li>
        <li>
          <a href="/flights" class="hover:text-gray-900 dark:hover:text-gray-200 transition-colors duration-200">
            Flights
          </a>
        </li>
        <li>
          <svg class="w-4 h-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
          </svg>
        </li>
        <li class="text-gray-400 dark:text-gray-500">
          Flight List
        </li>
      </ol>
    </nav>

    <!-- Header -->
    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6 mb-8">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
          Flight Archive
        </h1>
        <p class="text-gray-600 dark:text-gray-400">
          {hasError ? 'Unable to load flight data' : `${totalFlights.toLocaleString()} flights tracked`}
        </p>
      </div>
      
      <div class="flex flex-wrap gap-3">
        <a href="/flights" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7"></path>
          </svg>
          Map View
        </a>
        <button id="export-btn" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors duration-200">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Export CSV
        </button>
      </div>
    </div>

    <!-- Error State -->
    {hasError ? (
      <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 mb-8">
        <div class="flex items-center mb-2">
          <svg class="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <h3 class="text-red-800 dark:text-red-200 font-medium">Unable to Load Flight Data</h3>
        </div>
        <p class="text-red-700 dark:text-red-300">{errorMessage}</p>
      </div>
    ) : (
      <>
        <!-- Filters and Search -->
        <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 mb-8">
          <form method="GET" class="space-y-6">
            <!-- Search -->
            <div>
              <label for="search" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Search flights
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="search"
                  name="search"
                  value={search}
                  placeholder="Search by airline, flight number, or airport..."
                  class="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>

            <!-- Filter Grid -->
            <div class="grid md:grid-cols-4 gap-4">
              <!-- Airline Filter -->
              <div>
                <label for="airline" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Airline
                </label>
                <select
                  id="airline"
                  name="airline"
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">All Airlines</option>
                  {uniqueAirlines.map(airlineName => (
                    <option key={airlineName} value={airlineName} selected={airline === airlineName}>
                      {airlineName}
                    </option>
                  ))}
                </select>
              </div>

              <!-- Year Filter -->
              <div>
                <label for="year" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Year
                </label>
                <select
                  id="year"
                  name="year"
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">All Years</option>
                  {uniqueYears.map(yearValue => (
                    <option key={yearValue} value={yearValue.toString()} selected={year === yearValue.toString()}>
                      {yearValue}
                    </option>
                  ))}
                </select>
              </div>

              <!-- Status Filter -->
              <div>
                <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Status
                </label>
                <select
                  id="status"
                  name="status"
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">All Statuses</option>
                  <option value="completed" selected={status === 'completed'}>Completed</option>
                  <option value="booked" selected={status === 'booked'}>Booked</option>
                  <option value="cancelled" selected={status === 'cancelled'}>Cancelled</option>
                  <option value="delayed" selected={status === 'delayed'}>Delayed</option>
                </select>
              </div>

              <!-- Results Per Page -->
              <div>
                <label for="limit" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Per Page
                </label>
                <select
                  id="limit"
                  name="limit"
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="10" selected={limit === 10}>10</option>
                  <option value="20" selected={limit === 20}>20</option>
                  <option value="50" selected={limit === 50}>50</option>
                  <option value="100" selected={limit === 100}>100</option>
                </select>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-wrap gap-3">
              <button type="submit" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                Search
              </button>
              <a href="/flights/list" class="inline-flex items-center px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white font-medium rounded-lg transition-colors duration-200">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Clear Filters
              </a>
            </div>

            <!-- Hidden fields to preserve pagination state -->
            <input type="hidden" name="page" value="1" />
            {sortBy && <input type="hidden" name="sort" value={sortBy} />}
            {sortOrder && <input type="hidden" name="order" value={sortOrder} />}
          </form>
        </div>

        <!-- Results Summary -->
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
          <div class="text-sm text-gray-600 dark:text-gray-400">
            Showing {((page - 1) * limit) + 1} to {Math.min(page * limit, totalFlights)} of {totalFlights.toLocaleString()} flights
          </div>
          
          <!-- Pagination Info -->
          {totalPages > 1 && (
            <div class="text-sm text-gray-600 dark:text-gray-400">
              Page {page} of {totalPages}
            </div>
          )}
        </div>

        <!-- Flight Table -->
        {flights.length > 0 ? (
          <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
            <!-- Desktop Table -->
            <div class="hidden md:block overflow-x-auto">
              <table class="w-full">
                <thead class="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th class="px-6 py-3 text-left">
                      <a href={buildSortUrl('airline_name')} class="group flex items-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-200">
                        Airline
                        <svg class={`ml-1 w-3 h-3 ${sortBy === 'airline_name' ? 'text-blue-500' : 'text-gray-400 opacity-0 group-hover:opacity-100'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={sortBy === 'airline_name' && sortOrder === 'asc' ? "M5 15l7-7 7 7" : "M19 9l-7 7-7-7"}></path>
                        </svg>
                      </a>
                    </th>
                    <th class="px-6 py-3 text-left">
                      <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                        Route
                      </span>
                    </th>
                    <th class="px-6 py-3 text-left">
                      <a href={buildSortUrl('departure_time')} class="group flex items-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-200">
                        Date
                        <svg class={`ml-1 w-3 h-3 ${sortBy === 'departure_time' ? 'text-blue-500' : 'text-gray-400 opacity-0 group-hover:opacity-100'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={sortBy === 'departure_time' && sortOrder === 'asc' ? "M5 15l7-7 7 7" : "M19 9l-7 7-7-7"}></path>
                        </svg>
                      </a>
                    </th>
                    <th class="px-6 py-3 text-left">
                      <a href={buildSortUrl('flight_status')} class="group flex items-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-200">
                        Status
                        <svg class={`ml-1 w-3 h-3 ${sortBy === 'flight_status' ? 'text-blue-500' : 'text-gray-400 opacity-0 group-hover:opacity-100'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={sortBy === 'flight_status' && sortOrder === 'asc' ? "M5 15l7-7 7 7" : "M19 9l-7 7-7-7"}></path>
                        </svg>
                      </a>
                    </th>
                    <th class="px-6 py-3 text-left">
                      <a href={buildSortUrl('distance_km')} class="group flex items-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-200">
                        Distance
                        <svg class={`ml-1 w-3 h-3 ${sortBy === 'distance_km' ? 'text-blue-500' : 'text-gray-400 opacity-0 group-hover:opacity-100'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={sortBy === 'distance_km' && sortOrder === 'asc' ? "M5 15l7-7 7 7" : "M19 9l-7 7-7-7"}></path>
                        </svg>
                      </a>
                    </th>
                    <th class="px-6 py-3 text-right">
                      <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                        Actions
                      </span>
                    </th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                  {flights.map((flight) => (
                    <tr key={flight.id} class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150">
                      <td class="px-6 py-4">
                        <div class="flex items-center">
                          <div>
                            <div class="text-sm font-medium text-gray-900 dark:text-white">
                              {flight.airline_name || 'Unknown Airline'}
                            </div>
                            {flight.flight_number && (
                              <div class="text-sm text-gray-500 dark:text-gray-400">
                                {flight.flight_number}
                              </div>
                            )}
                          </div>
                        </div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-900 dark:text-white">
                          {flight.departure_airport_name} → {flight.arrival_airport_name}
                        </div>
                        <div class="text-sm text-gray-500 dark:text-gray-400">
                          {formatTime(flight.departure_time)}
                        </div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-900 dark:text-white">
                          {formatDate(flight.departure_time)}
                        </div>
                      </td>
                      <td class="px-6 py-4">
                        <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(flight.flight_status)}`}>
                          {flight.flight_status}
                        </span>
                      </td>
                      <td class="px-6 py-4 text-sm text-gray-900 dark:text-white">
                        {flight.distance_km ? `${flight.distance_km.toLocaleString()} km` : 'N/A'}
                      </td>
                      <td class="px-6 py-4 text-right">
                        <a href={`/flights/${flight.id}`} class="inline-flex items-center px-3 py-1 bg-blue-100 hover:bg-blue-200 dark:bg-blue-900 dark:hover:bg-blue-800 text-blue-700 dark:text-blue-200 text-sm font-medium rounded-lg transition-colors duration-200">
                          View
                          <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                          </svg>
                        </a>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <!-- Mobile Cards -->
            <div class="md:hidden divide-y divide-gray-200 dark:divide-gray-700">
              {flights.map((flight) => (
                <div key={flight.id} class="p-4">
                  <div class="flex items-start justify-between mb-3">
                    <div class="flex-1">
                      <h3 class="text-sm font-medium text-gray-900 dark:text-white">
                        {flight.airline_name || 'Unknown Airline'}
                        {flight.flight_number && ` ${flight.flight_number}`}
                      </h3>
                      <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        {flight.departure_airport_name} → {flight.arrival_airport_name}
                      </p>
                    </div>
                    <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(flight.flight_status)}`}>
                      {flight.flight_status}
                    </span>
                  </div>
                  
                  <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-3">
                    <span>{formatDate(flight.departure_time)} at {formatTime(flight.departure_time)}</span>
                    {flight.distance_km && (
                      <span>{flight.distance_km.toLocaleString()} km</span>
                    )}
                  </div>
                  
                  <div class="flex justify-end">
                    <a href={`/flights/${flight.id}`} class="inline-flex items-center px-3 py-1 bg-blue-100 hover:bg-blue-200 dark:bg-blue-900 dark:hover:bg-blue-800 text-blue-700 dark:text-blue-200 text-sm font-medium rounded-lg transition-colors duration-200">
                      View Details
                      <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </a>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <!-- Empty State -->
          <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-12 text-center">
            <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No flights found</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-6">
              {(search || airline || year || status) ? 'Try adjusting your search filters to find more flights.' : 'No flights have been added yet.'}
            </p>
            {(search || airline || year || status) && (
              <a href="/flights/list" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200">
                Clear Filters
              </a>
            )}
          </div>
        )}

        <!-- Pagination -->
        {totalPages > 1 && (
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mt-8">
            <!-- Previous/Next Buttons -->
            <div class="flex items-center gap-2">
              {hasPrevPage ? (
                <a href={buildFilterUrl({ page: (page - 1).toString(), limit: limit.toString(), airline, year, status, search, sort: sortBy, order: sortOrder })} 
                   class="inline-flex items-center px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 font-medium rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                  <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  Previous
                </a>
              ) : (
                <span class="inline-flex items-center px-3 py-2 bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-400 dark:text-gray-500 font-medium rounded-lg cursor-not-allowed">
                  <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  Previous
                </span>
              )}

              {hasNextPage ? (
                <a href={buildFilterUrl({ page: (page + 1).toString(), limit: limit.toString(), airline, year, status, search, sort: sortBy, order: sortOrder })} 
                   class="inline-flex items-center px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 font-medium rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                  Next
                  <svg class="w-5 h-5 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              ) : (
                <span class="inline-flex items-center px-3 py-2 bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-400 dark:text-gray-500 font-medium rounded-lg cursor-not-allowed">
                  Next
                  <svg class="w-5 h-5 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </span>
              )}
            </div>

            <!-- Page Numbers -->
            <div class="flex items-center gap-2">
              {Array.from({ length: Math.min(totalPages, 7) }, (_, i) => {
                let pageNum;
                if (totalPages <= 7) {
                  pageNum = i + 1;
                } else if (page <= 4) {
                  pageNum = i + 1;
                } else if (page >= totalPages - 3) {
                  pageNum = totalPages - 6 + i;
                } else {
                  pageNum = page - 3 + i;
                }

                const isCurrentPage = pageNum === page;
                const isEllipsis = false; // Simplified for now

                return (
                  <a key={pageNum} 
                     href={buildFilterUrl({ page: pageNum.toString(), limit: limit.toString(), airline, year, status, search, sort: sortBy, order: sortOrder })}
                     class={`px-3 py-2 font-medium rounded-lg transition-colors duration-200 ${
                       isCurrentPage 
                         ? 'bg-blue-600 text-white'
                         : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700'
                     }`}>
                    {pageNum}
                  </a>
                );
              })}
            </div>
          </div>
        )}
      </>
    )}
  </main>
</BaseLayout>

<script>
  //export functionality
  document.getElementById('export-btn')?.addEventListener('click', function() {
    //simple CSV export client-side
    const currentUrl = new URL(window.location.href);
    currentUrl.searchParams.set('export', 'csv');
    currentUrl.searchParams.set('limit', '1000'); //export more data
    
    //you could implement server-side CSV export at the API level
    //for now, show a simple notification
    alert('CSV export feature would be implemented server-side. This would download all filtered flights as a CSV file.');
  });

  //auto-submit form on filter changes for better UX
  const filterSelects = document.querySelectorAll('#airline, #year, #status, #limit');
  filterSelects.forEach(select => {
    select.addEventListener('change', function() {
      //auto-submit after a short delay to allow for multiple quick changes
      clearTimeout(window.filterTimeout);
      window.filterTimeout = setTimeout(() => {
        const form = select.closest('form');
        form?.submit();
      }, 500);
    });
  });
</script>

<style>
  /* Enhanced table styling */
  .table-row:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px -2px rgb(0 0 0 / 0.1);
  }

  /* Smooth transitions */
  .transition-smooth {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Status badge styling */
  .status-badge {
    font-variant: small-caps;
    letter-spacing: 0.5px;
  }

  /* Custom scrollbar for table */
  .overflow-x-auto::-webkit-scrollbar {
    height: 8px;
  }

  .overflow-x-auto::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 4px;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Dark mode scrollbar */
  .dark .overflow-x-auto::-webkit-scrollbar-track {
    background: #374151;
  }

  .dark .overflow-x-auto::-webkit-scrollbar-thumb {
    background: #6b7280;
  }

  .dark .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }
</style>