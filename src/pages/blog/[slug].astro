---
// =============================================================================
// INDIVIDUAL BLOG POST PAGE - Single blog post with full content and features
// Displays complete blog post with related posts, sharing, and SEO optimization
// =============================================================================

import Layout from '@/layouts/BaseLayout.astro';
import RelatedPosts from '@/components/blog/RelatedPosts.astro';
import ShareButtons from '@/components/blog/ShareButtons.svelte';
import CategoryTag from '@/components/blog/CategoryTag.astro';
import { db } from '@/lib/db/queries';
import { ContentProcessor } from '@/lib/content/processor';
import type { BlogPost } from '@/lib/db/types';
import { formatDistanceToNow, format } from 'date-fns';

//get the slug from the URL
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/blog');
}

//fetch the blog post
let post: BlogPost | null = null;
let processedContent = '';
let nextPost: BlogPost | null = null;
let prevPost: BlogPost | null = null;

try {
  //get the main post
  post = await db.getBlogPostBySlug(slug);
  
  if (!post) {
    return Astro.redirect('/blog');
  }

  //process the content
  const processed = ContentProcessor.processContent(post.content, post.title);
  processedContent = processed.html;

  //get next/previous posts
  [nextPost, prevPost] = await Promise.all([
    db.getNextBlogPost(post.published_at, post.id),
    db.getPreviousBlogPost(post.published_at, post.id),
  ]);

  //increment view count (fire and forget)
  db.incrementBlogPostViewCount(post.id).catch(console.error);

} catch (error) {
  console.error('Failed to fetch blog post:', error);
  return Astro.redirect('/blog');
}

//format dates
const publishedDate = post.published_at 
  ? formatDistanceToNow(new Date(post.published_at), { addSuffix: true })
  : null;

const formattedDate = post.published_at 
  ? format(new Date(post.published_at), 'MMMM d, yyyy')
  : null;

//build social sharing data
const shareUrl = `${Astro.url.origin}/blog/${post.slug}`;
const shareTitle = post.title;
const shareDescription = post.excerpt || `Read about ${post.title} on our blog.`;
const hashtags = post.tags?.map(tag => tag.name) || [];

//structured data for article
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.title,
  "description": post.excerpt,
  "url": shareUrl,
  "datePublished": post.published_at,
  "dateModified": post.updated_at,
  "author": {
    "@type": "Person",
    "name": post.author_name,
    ...(post.author_avatar && { "image": post.author_avatar }),
  },
  "publisher": {
    "@type": "Organization",
    "name": "Your Site Name", // Replace with actual site name
    "logo": {
      "@type": "ImageObject",
      "url": `${Astro.url.origin}/favicon.png` // Replace with actual logo
    }
  },
  ...(post.featured_image_url && {
    "image": {
      "@type": "ImageObject",
      "url": post.featured_image_url,
      "width": "1200",
      "height": "630"
    }
  }),
  "articleBody": post.content,
  "wordCount": post.content?.split(' ').length || 0,
  "articleSection": post.categories?.map(cat => cat.name) || [],
  "keywords": post.tags?.map(tag => tag.name).join(', ') || '',
  ...(post.reading_time && { "timeRequired": `PT${post.reading_time}M` }),
};

//breadcrumb structured data
const breadcrumbData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": Astro.url.origin
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Blog",
      "item": `${Astro.url.origin}/blog`
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": post.title,
      "item": shareUrl
    }
  ]
};
---

<Layout 
  title={post.title}
  description={post.excerpt || `Read about ${post.title} on our blog.`}
  image={post.featured_image_url}
  structuredData={[structuredData, breadcrumbData]}
  type="article"
  class="bg-white"
>
  <article class="min-h-screen bg-white">
    
    <!-- Hero Section -->
    <header class="bg-white">
      <div class="max-w-4xl mx-auto px-4 py-16 sm:py-24">
        
        <!-- Breadcrumb - Simplified -->
        <nav class="mb-12" aria-label="Breadcrumb">
          <ol class="flex items-center space-x-2 text-sm font-light text-gray-600">
            <li><a href="/" class="hover:text-black">Home</a></li>
            <li>/</li>
            <li><a href="/blog" class="hover:text-black">Blog</a></li>
          </ol>
        </nav>

        <!-- Categories -->
        {post.categories && post.categories.length > 0 && (
          <p class="text-sm font-normal uppercase tracking-widest text-gray-600 mb-4">
            {post.categories[0].name}
          </p>
        )}

        <!-- Title -->
        <h1 class="text-5xl md:text-7xl font-light tracking-tighter text-black leading-tight mb-8">
          {post.title}
        </h1>

        <!-- Excerpt -->
        {post.excerpt && (
          <p class="text-xl font-light text-gray-600 leading-relaxed mb-12">
            {post.excerpt}
          </p>
        )}

        <!-- Post Meta -->
        <div class="text-base font-light text-gray-600 mb-12">
          
          {post.author_name && (
            <span>By {post.author_name}</span>
          )}
          {formattedDate && (
            <span> • {formattedDate}</span>
          )}
          {post.reading_time && (
            <span> • {post.reading_time} min read</span>
          )}
        </div>

        <!-- Featured Image -->
        {post.featured_image_url && (
          <figure class="mb-16">
            <img
              src={post.featured_image_url}
              alt={post.title}
              class="w-full h-auto"
              loading="eager"
              decoding="async"
            />
          </figure>
        )}


      </div>
    </header>

    <!-- Article Content -->
    <div class="max-w-4xl mx-auto px-4">
      <div class="mb-16">
        
        <!-- Content -->
        <div class="prose prose-xl prose-p:font-normal prose-p:leading-relaxed prose-headings:font-light prose-headings:tracking-tight prose-a:text-black prose-a:underline max-w-none">
          <Fragment set:html={processedContent} />
        </div>

        <!-- Tags -->
        {post.tags && post.tags.length > 0 && (
          <div class="mt-16 pt-8 border-t border-gray-200">
            <p class="text-base font-light text-gray-600">
              Tags: {post.tags.map(tag => tag.name).join(', ')}
            </p>
          </div>
        )}


      </div>
    </div>

    <!-- Navigation -->
    {(prevPost || nextPost) && (
      <div class="max-w-4xl mx-auto px-4 py-16">
        <div class="flex justify-between items-center border-t border-gray-200 pt-8">
          {prevPost ? (
            <a 
              href={`/blog/${prevPost.slug}`}
              class="group text-left"
            >
              <p class="text-sm font-normal uppercase tracking-wider text-gray-600 group-hover:text-black">
                ← Previous
              </p>
              <p class="text-base font-light text-black group-hover:underline">
                {prevPost.title}
              </p>
            </a>
          ) : (
            <div></div>
          )}

          {nextPost && (
            <a 
              href={`/blog/${nextPost.slug}`}
              class="group text-right"
            >
              <p class="text-sm font-normal uppercase tracking-wider text-gray-600 group-hover:text-black">
                Next →
              </p>
              <p class="text-base font-light text-black group-hover:underline">
                {nextPost.title}
              </p>
            </a>
          )}
        </div>
      </div>
    )}

    <!-- Related Posts -->
    <div class="max-w-4xl mx-auto px-4 pb-24">
      <div class="border-t border-gray-200 pt-16">
        <h2 class="text-2xl font-light tracking-tight text-black mb-8">Related Reading</h2>
        <RelatedPosts 
          currentPostId={post.id}
          currentPostSlug={post.slug}
          limit={3}
          showAsGrid={false}
          cardVariant="minimal"
          className=""
        />
      </div>
    </div>

  </article>
</Layout>